<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golang | icps]]></title>
  <link href="https://icps0610.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="https://icps0610.github.io/"/>
  <updated>2021-09-27T19:32:47+08:00</updated>
  <id>https://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IDBarcode]]></title>
    <link href="https://icps0610.github.io/blog/2021/09/25/idbarcode/"/>
    <updated>2021-09-25T17:07:49+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/09/25/idbarcode</id>
    <content type="html"><![CDATA[<pre><code class="go">package main

import (
    "github.com/harry1453/go-common-file-dialog/cfd"
    "github.com/harry1453/go-common-file-dialog/cfdutil"
    "github.com/makiuchi-d/gozxing"
    "github.com/makiuchi-d/gozxing/oned"
    "github.com/xuri/excelize/v2"

    "fmt"
    "image/png"
    "os"
    "os/exec"
    "path/filepath"
    "runtime"
    "strconv"
    "strings"
    "syscall"
    "unsafe"
)

var (
    temp = "temp"
)

func main() {
    targetPath := openFile()
    buildTemp()
    process(targetPath)
    rmTemp()
}

func openFile() string {
    result, _ := cfdutil.ShowOpenFileDialog(cfd.DialogConfig{
        Title: "Open A xlsx File",
        Role:  "Open A xlsx File",
        FileFilters: []cfd.FileFilter{
            {
                DisplayName: "*.xlsx",
                Pattern:     "*.xlsx",
            },
            {
                DisplayName: "All Files (*.*)",
                Pattern:     "*.*",
            },
        },
        SelectedFileFilterIndex: 0,
        FileName:                "*.xlsx",
        DefaultExtension:        "xlsx",
    })

    return result
}

func process(targetPath string) {
    targetDir := filepath.Dir(targetPath) + "\\"
    targetFileName := filepath.Base(targetPath)
    outputPath := targetDir + "barcode_" + targetFileName
    f, err := excelize.OpenFile(targetPath)
    if err != nil {
        rmTemp()
    }
    printError(err)
    //選第一個工作表
    var sheet string
    for _, value := range f.GetSheetMap() {
        sheet = value
        break
    }
    //產生圖片
    rows, _ := f.GetRows(sheet)
    for i, row := range rows {
        if len(row) &gt; 1 {
            id := row[1]
            if checkIDCode(id) != "" {
                f.SetRowHeight(sheet, i+1, 30)
                genCode128(id)
            }
        }
    }
    //插入圖片
    for i, row := range rows {
        for j, cell := range row {
            l := rune(j + 65 + 2)
            location := fmt.Sprintf("%c%v", l, i+1)
            if j == 1 {
                f.AddPicture(sheet, location, genPath(cell), `{"y_offset": 6, "x_scale": 0.5, "y_scale": 0.5, "positioning": "oneCell"}`)
            }
        }
    }
    err = f.SaveAs(outputPath)
    if err == nil {
        //MessageBox("產生", "檔案已產生  " + outputPath)
        cmd := fmt.Sprintf(`explorer /select, %s`, outputPath)
        runCmd(cmd)
    } else {
        MessageBox("錯誤 !!!", err.Error())
    }
}

func checkIDCode(num string) string {
    var sum int
    idTableCh := strings.Split("FBEAHDNTPJKQMGOCUIVWXZ", "")
    idTableValue := []int{15, 11, 14, 10, 17, 13, 22, 27, 23, 18, 19, 24, 21, 16, 35, 12, 28, 34, 29, 32, 30, 33}

    for idx, c := range idTableCh {
        if c == string(num[:1]) {
            v := idTableValue[idx]
            s := (v%10)*9 + (v / 10)
            sum += s
            break
        }
    }

    for idx, n := range num[1:9] {
        i, _ := strconv.Atoi(string(n))
        sum += i * (8 - idx)
    }
    i, _ := strconv.Atoi(string(num[9:]))
    sum += i
    if sum%10 == 0 {
        return num
    }
    return ""
}

func genCode128(id string) {
    enc := oned.NewCode128Writer()
    img, _ := enc.Encode(id, gozxing.BarcodeFormat_CODE_128, 250, 50, nil)
    path := genPath(id)
    file, _ := os.Create(path)
    defer file.Close()
    png.Encode(file, img)
}

func genPath(id string) string {
    return fmt.Sprintf(`%s\%s.png`, temp, id)
}

func MessageBox(title, caption string) {
    syscall.NewLazyDLL("user32.dll").NewProc("MessageBoxW").Call(
        uintptr(0),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(caption))),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(title))),
        uintptr(0))
}

func runCmd(cmd string) {
    exec.Command("cmd.exe", "/C", cmd).CombinedOutput()
}

func buildTemp() {
    cmd := fmt.Sprintf(`mkdir %s`, temp)
    runCmd(cmd)
}

func rmTemp() {
    cmd := fmt.Sprintf(`del /q %s`, temp)
    runCmd(cmd)

    cmd = fmt.Sprintf(`rmdir %s`, temp)
    runCmd(cmd)
}

func printError(err error) {
    if err != nil {
        pc, _, _, _ := runtime.Caller(1)
        fmt.Println(runtime.FuncForPC(pc).Name())
        fmt.Println(err)
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Icon]]></title>
    <link href="https://icps0610.github.io/blog/2021/09/25/icon/"/>
    <updated>2021-09-25T15:06:51+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/09/25/icon</id>
    <content type="html"><![CDATA[<p><code>https://github.com/akavel/rsrc</code></p>

<p><code>https://docs.microsoft.com/zh-tw/cpp/mfc/build-requirements-for-windows-vista-common-controls?view=msvc-160</code></p>

<pre><code>#ico.manifest
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;&lt;assemblyIdentity version="1.0.0.0" processorArchitecture="amd64" name=" controls" type="win32"&gt;&lt;/assemblyIdentity&gt;&lt;dependency&gt;&lt;dependentAssembly&gt;&lt;assemblyIdentity type="win32" name="Microsoft.Windows.Common-Controls" version="6.0.0.0" processorArchitecture="*" publicKeyToken="6595b64144ccf1df" language="*"&gt;&lt;/assemblyIdentity&gt;&lt;/dependentAssembly&gt;&lt;/dependency&gt;&lt;/assembly&gt;
</code></pre>

<p><code>rsrc.exe -manifest ico.manifest -ico app.ico</code><br/>
<code>go build -o ibc.exe</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notify]]></title>
    <link href="https://icps0610.github.io/blog/2021/08/29/notify/"/>
    <updated>2021-08-29T16:41:07+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/08/29/notify</id>
    <content type="html"><![CDATA[<pre><code class="go  ">
package main

import (
    "fmt"
    "github.com/anaskhan96/soup"
    "io/ioutil"
    "net/http"
    "os"
    "os/exec"
    "regexp"
    "runtime"
)

var (
    path      = "/data/go/covid19/notify.txt"
    matsuhUrl = ""
    record    = readFile(path)
)

func main() {
    var content string
    doc := getDoc(matsuhUrl)
    for _, ul := range doc.FindAll("ul", "class", "newsList") {
        for _, li := range ul.FindAll("li") {
            a := li.Find("a")
            title := a.Find("p").Text()
            if regexMatch(title, "接種通知") {
                url := a.Attrs()["href"]
                date := a.Find("date").Text()
                text := getPageContent(url)
                content += (date + text)
                break
            }
        }
    }

    if record != content {
        lineMessage(content)
        saveFile(content, path)
    }

}

func getPageContent(url string) string {
    var text string
    doc2 := getDoc(url)
    for i, tag := range doc2.Find("article").Children() {
        if i &lt;= 4 {
            for _, ta := range tag.Children() {
                text += "\n\n" + ta.FullText()
            }
        }
    }
    return text
}

func lineMessage(message string) {
    cmd := fmt.Sprintf(`/data/go/lineMessage/lineMessage me "%s"`, message)
    _, err := exec.Command("bash", "-c", cmd).Output()
    printError(err)
}

func getDoc(url string) soup.Root {
    req, err := http.NewRequest("GET", url, nil)
    printError(err)
    res, err := http.DefaultClient.Do(req)
    printError(err)
    body, err := ioutil.ReadAll(res.Body)
    printError(err)
    resp := string(body)
    return soup.HTMLParse(resp)
}

func regexMatch(str, keyword string) bool {
    match, _ := regexp.MatchString(keyword, str)
    return match
}

func readFile(path string) string {
    dat, err := ioutil.ReadFile(path)
    printError(err)
    return string(dat)
}

func saveFile(content, path string) {
    err := ioutil.WriteFile(path, []byte(content), 0644)
    printError(err)
}

func printError(err error) {
    if err != nil {
        pc, _, _, _ := runtime.Caller(1)
        fmt.Println(runtime.FuncForPC(pc).Name())
        fmt.Println(err)
    }
}

var _, _ = fmt.Println, os.Exit
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[googleForms]]></title>
    <link href="https://icps0610.github.io/blog/2021/06/01/googleforms/"/>
    <updated>2021-06-01T13:52:18+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/06/01/googleforms</id>
    <content type="html"><![CDATA[<pre><code class="go  ">//"github.com/sclevine/agouti" 

func main() {
    page, driver := openBrowser(600, 700)
    defer driver.Stop()
    page.Navigate(url)
    sleep(1000)
    delay := 100

    list = page.AllByClass("freebirdFormviewerViewNumberedItemContainer")

    fillAnswer("text", getToday())
    fillAnswer("select", "業務支援部")

    radios := strings.Split("211110021111", "")
    for _, radio := range radios {
        fillAnswer("radio", radio)
    }

    page.AllByClass("appsMaterialWizButtonPaperbuttonLabel").At(0).Click()

}

func fillAnswer(cate, ans string) {
    switch cate {
    case "text":
        //文字
        list.At(idx).FirstByClass("quantumWizTextinputPaperinputInput").Fill(ans)
    case "select":
        //下拉選單
        list.At(idx).FirstByClass("quantumWizMenuPaperselectOption").Fill(ans)
    case "radio":
        //選擇
        i, _ := strconv.Atoi(ans)
        list.At(idx).AllByClass("appsMaterialWizToggleRadiogroupOffRadio").At(i).Click()
    }
    idx += 1
    sleep(delay)
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeneratorPassword]]></title>
    <link href="https://icps0610.github.io/blog/2021/04/24/generatorpassword/"/>
    <updated>2021-04-24T13:31:47+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/04/24/generatorpassword</id>
    <content type="html"><![CDATA[<pre><code class="go">
func generatorPassword(n int) string {
    rand.Seed(time.Now().UnixNano())
    table := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    var str string
    table := chrTable()
    for i := 0; i &lt; n; i++ {
        r := rand.Intn(len(table))
        str += string(table[r])
    }
    return str
}
</code></pre>
]]></content>
  </entry>
  
 </feed>
