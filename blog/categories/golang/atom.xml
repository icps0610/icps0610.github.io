<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golang | icps]]></title>
  <link href="https://icps0610.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="https://icps0610.github.io/"/>
  <updated>2021-06-01T14:08:11+08:00</updated>
  <id>https://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[googleForms]]></title>
    <link href="https://icps0610.github.io/blog/2021/06/01/googleforms/"/>
    <updated>2021-06-01T13:52:18+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/06/01/googleforms</id>
    <content type="html"><![CDATA[<pre><code class="go  ">//"github.com/sclevine/agouti"  

page, driver := openBrowser(600, 700)
defer driver.Stop()
page.Navigate(url)
sleep(1000)
delay := 100

//日期
page.AllByClass("quantumWizTextinputPaperinputInput").At(0).Fill(getToday())
sleep(delay)
//下拉式選單
page.AllByClass("quantumWizMenuPaperselectEl").At(0).AllByClass("quantumWizMenuPaperselectOption").At(0).Fill("業務支援部")
sleep(delay)
//文字
page.AllByClass("quantumWizTextinputPaperinputInput").At(2).Fill(earTemp)
sleep(delay)
//選擇
page.AllByClass("appsMaterialWizToggleRadiogroupOffRadio").At(2).Click()
sleep(delay)
//送出
page.AllByClass("appsMaterialWizButtonPaperbuttonLabel").At(0).Click()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeneratorPassword]]></title>
    <link href="https://icps0610.github.io/blog/2021/04/24/generatorpassword/"/>
    <updated>2021-04-24T13:31:47+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/04/24/generatorpassword</id>
    <content type="html"><![CDATA[<pre><code class="go">
func generatorPassword(n int) string {
    rand.Seed(time.Now().UnixNano())
    table := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    var str string
    table := chrTable()
    for i := 0; i &lt; n; i++ {
        r := rand.Intn(len(table))
        str += string(table[r])
    }
    return str
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faker]]></title>
    <link href="https://icps0610.github.io/blog/2021/02/05/faker/"/>
    <updated>2021-02-05T02:17:12+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/02/05/faker</id>
    <content type="html"><![CDATA[<pre><code class="go">func checkIDCode(IDNum string) bool {
    var sum int
    idTableCh := strings.Split("FBEAHDNTPJKQMGOCUIVWXZ", "")
    idTableValue := []int{15, 11, 14, 10, 17, 13, 22, 27, 23, 18, 19, 24, 21, 16, 35, 12, 28, 34, 29, 32, 30, 33}

    for idx, c := range idTableCh {
        if c == string(IDNum[0]) {
            v := idTableValue[idx]
            s := (v%10)*9 + (v / 10)
            sum += s
            break
        }
    }

    for idx, n := range IDNum[1:9] {
        i, _ := strconv.Atoi(string(n))
        sum += i * (8 - idx)
    }
    i, _ := strconv.Atoi(string(IDNum[9]))
    sum += i
    return (sum%10 == 0)
}

func checkCompanyCode(num string) bool {
    cc := []int{1, 2, 1, 2, 1, 2, 4, 1}
    var sum int

    for idx, e := range num {
        s := int((e - 48)) * cc[idx]
        t := s/10 + s%10
        sum += t
    }
    return (sum)%10 == 0 || (string(num[6]) == "7" &amp;&amp; (sum+1)%10 == 0)
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post]]></title>
    <link href="https://icps0610.github.io/blog/2019/12/17/post/"/>
    <updated>2019-12-17T17:55:34+08:00</updated>
    <id>https://icps0610.github.io/blog/2019/12/17/post</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>ref <a href="https://ithelp.ithome.com.tw/articles/10159383">https://ithelp.ithome.com.tw/articles/10159383</a></p></blockquote></blockquote>

<pre><code class="go">func get() {
    resp, err := http.Get("https://123/456.php?q=789")
    if err != nil {
        // handle error
    }
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        // handle error
    }
    html := string(body)
    doc := soup.HTMLParse(html)
}

func post() {
    resp, err := http.PostForm("https://123", url.Values{"SN": {word}})
    if err != nil {
        // handle error
    }
    resp.Header.Set("Content-Type", "application/x-www-form-urlencoded;application/json; charset=utf-8")
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        // handle error
    }
    html := string(body)
    doc := soup.HTMLParse(html)
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gin]]></title>
    <link href="https://icps0610.github.io/blog/2019/10/22/gin/"/>
    <updated>2019-10-22T22:15:44+08:00</updated>
    <id>https://icps0610.github.io/blog/2019/10/22/gin</id>
    <content type="html"><![CDATA[<pre><code class="go">form, _ := c.MultipartForm()
check := form.Value["idx"]
files := form.File["uploads"]
</code></pre>
]]></content>
  </entry>
  
 </feed>
