<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golang | icps]]></title>
  <link href="https://icps0610.github.io/blog/categories/golang/atom.xml" rel="self"/>
  <link href="https://icps0610.github.io/"/>
  <updated>2021-08-29T17:10:21+08:00</updated>
  <id>https://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notify]]></title>
    <link href="https://icps0610.github.io/blog/2021/08/29/notify/"/>
    <updated>2021-08-29T16:41:07+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/08/29/notify</id>
    <content type="html"><![CDATA[<pre><code class="go  ">
package main

import (
    "fmt"
    "github.com/anaskhan96/soup"
    "io/ioutil"
    "net/http"
    "os"
    "os/exec"
    "regexp"
    "runtime"
)

var (
    path      = "/data/go/covid19/notify.txt"
    matsuhUrl = ""
    record    = readFile(path)
)

func main() {
    var content string
    doc := getDoc(matsuhUrl)
    for _, ul := range doc.FindAll("ul", "class", "newsList") {
        for i, li := range ul.FindAll("li") {
            a := li.Find("a")
            title := a.Find("p").Text()
            if regexMatch(title, "接種通知") {
                url := a.Attrs()["href"]
                date := a.Find("date").Text()
                text := getPageContent(url)
                content += (date + text)
                break
            }
        }
    }

    if record != content {
        lineMessage(content)
        saveFile(content, path)
    }

}

func getPageContent(url string) string {
    var text string
    doc2 := getDoc(url)
    for i, tag := range doc2.Find("article").Children() {
        if i &lt;= 4 {
            for _, ta := range tag.Children() {
                text += "\n\n" + ta.FullText()
            }
        }
    }
    return text
}

func lineMessage(message string) {
    cmd := fmt.Sprintf(`/data/go/lineMessage/lineMessage me "%s"`, message)
    _, err := exec.Command("bash", "-c", cmd).Output()
    printError(err)
}

func getDoc(url string) soup.Root {
    req, err := http.NewRequest("GET", url, nil)
    printError(err)
    res, err := http.DefaultClient.Do(req)
    printError(err)
    body, err := ioutil.ReadAll(res.Body)
    printError(err)
    resp := string(body)
    return soup.HTMLParse(resp)
}

func regexMatch(str, keyword string) bool {
    match, _ := regexp.MatchString(keyword, str)
    return match
}

func readFile(path string) string {
    dat, err := ioutil.ReadFile(path)
    printError(err)
    return string(dat)
}

func saveFile(content, path string) {
    err := ioutil.WriteFile(path, []byte(content), 0644)
    printError(err)
}

func printError(err error) {
    if err != nil {
        pc, _, _, _ := runtime.Caller(1)
        fmt.Println(runtime.FuncForPC(pc).Name())
        fmt.Println(err)
    }
}

var _, _ = fmt.Println, os.Exit
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[googleForms]]></title>
    <link href="https://icps0610.github.io/blog/2021/06/01/googleforms/"/>
    <updated>2021-06-01T13:52:18+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/06/01/googleforms</id>
    <content type="html"><![CDATA[<pre><code class="go  ">//"github.com/sclevine/agouti" 

func main() {
    page, driver := openBrowser(600, 700)
    defer driver.Stop()
    page.Navigate(url)
    sleep(1000)
    delay := 100

    list = page.AllByClass("freebirdFormviewerViewNumberedItemContainer")

    fillAnswer("text", getToday())
    fillAnswer("select", "業務支援部")

    radios := strings.Split("211110021111", "")
    for _, radio := range radios {
        fillAnswer("radio", radio)
    }

    page.AllByClass("appsMaterialWizButtonPaperbuttonLabel").At(0).Click()

}

func fillAnswer(cate, ans string) {
    switch cate {
    case "text":
        //文字
        list.At(idx).FirstByClass("quantumWizTextinputPaperinputInput").Fill(ans)
    case "select":
        //下拉選單
        list.At(idx).FirstByClass("quantumWizMenuPaperselectOption").Fill(ans)
    case "radio":
        //選擇
        i, _ := strconv.Atoi(ans)
        list.At(idx).AllByClass("appsMaterialWizToggleRadiogroupOffRadio").At(i).Click()
    }
    idx += 1
    sleep(delay)
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeneratorPassword]]></title>
    <link href="https://icps0610.github.io/blog/2021/04/24/generatorpassword/"/>
    <updated>2021-04-24T13:31:47+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/04/24/generatorpassword</id>
    <content type="html"><![CDATA[<pre><code class="go">
func generatorPassword(n int) string {
    rand.Seed(time.Now().UnixNano())
    table := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    var str string
    table := chrTable()
    for i := 0; i &lt; n; i++ {
        r := rand.Intn(len(table))
        str += string(table[r])
    }
    return str
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faker]]></title>
    <link href="https://icps0610.github.io/blog/2021/02/05/faker/"/>
    <updated>2021-02-05T02:17:12+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/02/05/faker</id>
    <content type="html"><![CDATA[<pre><code class="go">func checkIDCode(IDNum string) bool {
    var sum int
    idTableCh := strings.Split("FBEAHDNTPJKQMGOCUIVWXZ", "")
    idTableValue := []int{15, 11, 14, 10, 17, 13, 22, 27, 23, 18, 19, 24, 21, 16, 35, 12, 28, 34, 29, 32, 30, 33}

    for idx, c := range idTableCh {
        if c == string(IDNum[0]) {
            v := idTableValue[idx]
            s := (v%10)*9 + (v / 10)
            sum += s
            break
        }
    }

    for idx, n := range IDNum[1:9] {
        i, _ := strconv.Atoi(string(n))
        sum += i * (8 - idx)
    }
    i, _ := strconv.Atoi(string(IDNum[9]))
    sum += i
    return (sum%10 == 0)
}

func checkCompanyCode(num string) bool {
    cc := []int{1, 2, 1, 2, 1, 2, 4, 1}
    var sum int

    for idx, e := range num {
        s := int((e - 48)) * cc[idx]
        t := s/10 + s%10
        sum += t
    }
    return (sum)%10 == 0 || (string(num[6]) == "7" &amp;&amp; (sum+1)%10 == 0)
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post]]></title>
    <link href="https://icps0610.github.io/blog/2019/12/17/post/"/>
    <updated>2019-12-17T17:55:34+08:00</updated>
    <id>https://icps0610.github.io/blog/2019/12/17/post</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>ref <a href="https://ithelp.ithome.com.tw/articles/10159383">https://ithelp.ithome.com.tw/articles/10159383</a></p></blockquote></blockquote>

<pre><code class="go">func get() {
    resp, err := http.Get("https://123/456.php?q=789")
    if err != nil {
        // handle error
    }
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        // handle error
    }
    html := string(body)
    doc := soup.HTMLParse(html)
}

func post() {
    resp, err := http.PostForm("https://123", url.Values{"SN": {word}})
    if err != nil {
        // handle error
    }
    resp.Header.Set("Content-Type", "application/x-www-form-urlencoded;application/json; charset=utf-8")
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        // handle error
    }
    html := string(body)
    doc := soup.HTMLParse(html)
}
</code></pre>
]]></content>
  </entry>
  
 </feed>
