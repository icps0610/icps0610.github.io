<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2016-06-17T21:15:48+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Csv]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/17/csv/"/>
    <updated>2016-06-17T21:00:27+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/17/csv</id>
    <content type="html"><![CDATA[<blockquote><p>ref 中文亂碼 <a href="https://cnodejs.org/topic/516e0ab46d382773067a5473">https://cnodejs.org/topic/516e0ab46d382773067a5473</a>
``` ruby</p>

<h1>encoding: UTF-8</h1>

<p>require &lsquo;csv&rsquo;
filename=&lsquo;test.csv&rsquo;
File.open(filename,&ldquo;wb&rdquo;){|f| f.write(&ldquo;\xEF\xBB\xBF&rdquo;) } #解決中文亂碼 加入"\xEF\xBB\xBF"
@csv=[[&ldquo;麵包&rdquo;, &ldquo;15&rdquo;], [&ldquo;吐司&rdquo;, &ldquo;50&rdquo;], [&ldquo;牛奶&rdquo;, &ldquo;70&rdquo;]]</p></blockquote>

<h1>save</h1>

<p>CSV.open(filename, &lsquo;a&rsquo;) do |csv|
    @csv.each { |data| csv &lt;&lt; data }
end</p>

<h1>讀取每行</h1>

<p>CSV.foreach(filename)do |row|
    row.each do |column|
        print column
    end
    puts
end</p>

<h1>麵包15</h1>

<h1>吐司50</h1>

<h1>牛奶70</h1>

<h1>讀取</h1>

<p>p CSV.read(filename, { col_sep: &lsquo;,&rsquo; }) # col_sep: &lsquo;;&rsquo; 使用;分割 預設,可省略</p>

<h1>[[&ldquo;﻿麵包&rdquo;, &ldquo;15&rdquo;], [&ldquo;吐司&rdquo;, &ldquo;50&rdquo;], [&ldquo;牛奶&rdquo;, &ldquo;70&rdquo;]]</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[補零]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/17/zero-fill/"/>
    <updated>2016-06-17T20:57:53+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/17/zero-fill</id>
    <content type="html"><![CDATA[<pre><code class="ruby">number="23"
p number.rjust(8, '0')
#"00000023"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/17/array/"/>
    <updated>2016-06-17T20:48:38+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/17/array</id>
    <content type="html"><![CDATA[<h3>array &lt;===> hash</h3>

<pre><code class="ruby">key = [ "a" , "b" ]
value = [ 1 , 2 ]
hash = Hash[ key.map {|k| [ k, value[key.index(k)] ] } ]
p hash
#{"a"=&gt;1, "b"=&gt;2}

tmp = [ "key" , "value" , "key1" , "value1"]
p hash=Hash[tmp.each_slice(2).map{|i|[i[0],i[1]]}]
#{"key"=&gt;"value", "key1"=&gt;"value1"}
</code></pre>

<h3>array項目內重複次數</h3>

<pre><code class="ruby">array=[1,2,2,3,3,4,4,4,]

#Array重複次數最多的前nu個
def arry_max_frequency(array,nu)
 return array.each_with_object(Hash.new(0)){|m,h|h[m]+=1}.sort_by{|k,v|v}.reverse.take(nu).map{|i|i[0]}
end

p arry_max_frequency(array,3)
#[4, 3, 2]

#Array項目內重複次數
p array.each_with_object(Hash.new(0)){|m,h|h[m]+= 1}
#{1=&gt;1, 2=&gt;2, 3=&gt;2, 4=&gt;3}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Base64]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/17/base64/"/>
    <updated>2016-06-17T20:19:10+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/17/base64</id>
    <content type="html"><![CDATA[<pre><code class="ruby">require "base64"
def encode(file,output_file)
  target = File.open(output_file, 'wb')
  target.truncate(target.size)
  target.write(Base64.encode64(open(file,"rb").to_a.join))
  target.close()
end

def decode(file,output_file)
  target = File.open(output_file, 'wb')
  target.truncate(target.size)
  target.write(Base64.decode64(open(file,"rb").to_a.join))
  target.close
end

encode("1.jpg","2.txt")
decode("2.txt","3.jpg")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unlockpattern]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/17/unlockpattern/"/>
    <updated>2016-06-17T00:56:20+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/17/unlockpattern</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
require 'rmagick'
class Up

  def all_possible
    (4..9).map do |i|
      @ok ||= 0
      "123456789".scan(/./).permutation(i).to_a.each do |c|
        @ok+=1 if check(c.to_a.join,0) == true
      end
    end
    return @ok
  end

  def rand_produce
    @canvas = Magick::ImageList.new
    @canvas.read("base.jpg")
    @draw = Magick::Draw.new
    code = produce_code
    draw_line(code)
    save(code)
  end

  def produce_code
    code="123456789".scan(/./).sample(9).to_a.join
    check(code,0)? code : produce_code
  end

  def check(code,i)
    if i == code.length-1
      return true
    else
      x=(code[i].to_i-1).divmod(3)
      y=(code[i+1].to_i-1).divmod(3)
      testx = (x[1]-y[1]).abs
      testy = (x[0]-y[0]).abs
      if (testx-testy).abs ==1
        check(code,i+1)
      elsif testx == 2 or testy == 2
        m = (code[i].to_i+code[i+1].to_i)/2
        code[0,i].match(m.to_s) == nil ? false : check(code,i+1)
      else
         check(code,i+1)
      end
    end
  end

  def location(i)
    base=i.to_i.divmod(3)
    if base[1] == 0
      x=base[1]+2
      y=base[0]-1
    else
      x=base[1]-1
      y=base[0]
    end
    return [50+100*x-5,50+100*y]
  end

  def draw_line(code)
    (0..code.length-2).each do |i|
      @draw.fill('red')
      @draw.line(location(code[i])[0],location(code[i])[1],location(code[i+1])[0],location(code[i+1])[1])
      if i == 0
        @draw.fill('blue')
        @draw.circle(location(code[i])[0],location(code[i])[1],location(code[i])[0]+6,location(code[i])[1]+6)
      elsif i == code.length-2
        @draw.fill('yellow')
        @draw.circle(location(code[i+1])[0],location(code[i+1])[1],location(code[i+1])[0]+6,location(code[i+1])[1]+6)
      end
    end
  end

  def save(code)
    text = Magick::Draw.new
    text.font_family = 'helvetica'
    text.pointsize = 14
    text.gravity = Magick::CenterGravity
    text.annotate(@canvas, 0,0,-5,-125, code)
    @draw.draw(@canvas)
    @canvas.display
    @canvas.write("code.jpg")
  end
end
unlockpattern=Up.new
puts unlockpattern.all_possible #所有可能
unlockpattern.rand_produce　#隨機產生
</code></pre>
]]></content>
  </entry>
  
</feed>
