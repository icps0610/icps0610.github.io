<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2019-03-01T14:33:15+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Weather_api]]></title>
    <link href="http://icps0610.github.io/blog/2018/12/13/weather-api/"/>
    <updated>2018-12-13T17:53:26+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/12/13/weather-api</id>
    <content type="html"><![CDATA[<p><code>https://works.ioa.tw/weather/api/doc/index.html#api-Weather_API</code>
<code>http://opendata2.epa.gov.tw/AQI.json</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Display]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/27/display/"/>
    <updated>2018-10-27T17:59:06+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/27/display</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
class Display
    def self.display_content(contents, idxs=nil)
        return "error" if contents.first.size != idxs.size
        max = content_transpose_max_size(contents)
        contents.map do |content|
            content.each_index.map do|i|
                space = max[i] - string_size(content[i]) + 1
                show  = content[i]
                if idxs and idxs[i] == 1
                    "#{" "*space}#{show}"
                else
                   "#{show}#{" "*space}"
                end
            end.join
        end
    end

    private

    def self.string_size(string)
        string.each_byte.map do |c|
            c &lt; 127 ? 1 : 2
        end.compact.inject(:+)
    end

    def self.content_transpose_max_size(contents)
        contents.transpose.map do |content|
            content.map do |c|
                c ? string_size(c) : 0
            end.max
        end
    end
end
#require "/data/ruby/display/display.rb"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Array_empty]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/24/array-empty/"/>
    <updated>2018-10-24T11:12:57+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/24/array-empty</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>ref <a href="https://stackoverflow.com/questions/5878697/how-do-i-remove-blank-elements-from-an-array">https://stackoverflow.com/questions/5878697/how-do-i-remove-blank-elements-from-an-array</a>
``` ruby
array = [[], &ldquo;&rdquo;, &ldquo;2&rdquo;, nil]
array.compact</p>

<h1>[[], &ldquo;&rdquo;, &ldquo;2&rdquo;]</h1>

<p>array.reject(&amp;:blank?)</p>

<h1>[&ldquo;2&rdquo;]</h1>

<p>```</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ta]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/21/ta/"/>
    <updated>2018-10-21T16:37:50+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/21/ta</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
def tar(file, ext)
    case ext
    when /tar.bz2/
        "tar jcvf #{file} [DIR]\ntar jxvf #{file}\n"
    when /tar.tgz/
        "tar zcvf #{file} [DIR]\ntar zxvf #{file}\n"
    when /tar.bz/
        "tar jxvf #{file}"
    when /tar.gz/
        "tar zcvf #{file} [DIR]\ntar zxvf #{file}\n"
    when /tar.xz/
        "tar Jcvf #{file} [DIR]\ntar Jxvf #{file}\n"
    when /tar.Z/
        "tar Zcvf #{file} [DIR]\ntar Zxvf #{file}\n"
    when /tgz/
        "tar zcvf #{file} [DIR]\ntar zxvf #{file}\n"
    when /tar/
        "tar cvf #{file} [DIR]\ntar xvf #{file}\n"
    when /zip/
        "zip #{file} [DIR]\nunzip #{file}\n"
    when /bz2/
        "bzip2 -z #{file}\nbzip2 -d #{file}\nbunzip2 #{file}"
    when /rar/
        "rar a #{file} [DIR]\nrar e #{file}\nrar x #{file} [DIR]\n"
    when /lha/
        "lha -a #{file} [DIR]\nlha -e #{file}\n"
    when /bz/
        "bzip2 -d #{file}\nbunzip2 #{file}"
    when /xz/
        "xz -z #{file}\nxz -d #{file}\n"
    when /7z/
        "7z a #{file} [DIR]\n7z a #{file}.7z [DIR] -p[PASSWORD]\n7z x #{file}\n"
    when /gz/
        "gzip #{file}\ngunzip #{file}\ngzip -d #{file}\n"
    when /Z/
        "uncompress #{file}"
    else
        ext = "nil" if ext == ""
        "error\n#{file}\n#{ext}\n"
    end
end
file = ARGV[0]
if not file
    puts "ta.rb filename"
    exit
end
ext = File.basename(file).scan(/\.(.*)/).join
puts tar(file, ext)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cpr]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/20/cpr/"/>
    <updated>2018-10-20T23:09:11+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/20/cpr</id>
    <content type="html"><![CDATA[<pre><code class="ruby">source = ARGV[0]
to     = ARGV[1]
system("rsync -aAXv #{source}/* #{to} | pv -ls `find #{source}|wc -l` &gt;/dev/null")
</code></pre>
]]></content>
  </entry>
  
 </feed>
