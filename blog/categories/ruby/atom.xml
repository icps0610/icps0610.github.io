<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2018-09-24T04:15:32+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remove_black]]></title>
    <link href="http://icps0610.github.io/blog/2018/09/23/remove-black/"/>
    <updated>2018-09-23T16:39:45+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/09/23/remove-black</id>
    <content type="html"><![CDATA[<pre><code class="ruby"># encoding: utf-8
require "watir"
require 'rmagick'

def pixel_black(img, x, y)
    pixel = img.pixel_color(x, y)
    if not [ pixel.red, pixel.green, pixel.blue ] == [ 0, 0, 0 ]
        return true
    end
end

def locate_x(img)
    x = 1920
    y = img.rows
    i = 0
    loop do
        if pixel_black(img, i, i) 
            @fxy ||= locate_y(img, "left", i, i)
        end
        if pixel_black(img, x, y) 
            @bxy ||= locate_y(img, "right", x, y)
        end
        if defined?(@fxy) and defined?(@bxy)
            return [@fxy, @bxy].flatten
        end
        i += 1
        x -= 1
        y -= 1
    end
end

def locate_y(img, direction, x, y)
    if direction == "left"
        i = -1
    else
        i =  1
    end
    if pixel_black(img, x, y) and pixel_black(img, x, y + i)
        locate_y(img, direction, x, y + i)
    else
        return x, y
    end
end

screenshot = Magick::Image.capture{ self.filename = "root" }
fx, fy, bx, by = locate_x(screenshot)
screenshot.crop!(fx, fy, bx-fx, by-fy)
screenshot.write("/tmp/screenshot.jpg")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moto]]></title>
    <link href="http://icps0610.github.io/blog/2018/06/27/moto/"/>
    <updated>2018-06-27T01:14:07+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/06/27/moto</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
require 'rmagick'

def add_number(canvas, file, x, y, h)
    image = Magick::ImageList.new(file).crop!(0, h, 63, 90)
    canvas.composite!(image, x, y, Magick::OverCompositeOp)
end

number = "98765"
x, y = 1232, 1361
canvas = Magick::Image.read("base.png").first
number.split(//).each_with_index do |n, i|
    xn = x + i * 87
    yn = y + rand(0..3)
    add_number(canvas, "w.png", xn, yn, n.to_i * 80)
end
add_number(canvas, "b.png", 1662, 1353, rand(0..720))
canvas.write("/tmp/moto.png")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read_csv_encoding]]></title>
    <link href="http://icps0610.github.io/blog/2018/04/21/vba-excel-csv-and-use-ruby-read/"/>
    <updated>2018-04-21T19:43:25+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/04/21/vba-excel-csv-and-use-ruby-read</id>
    <content type="html"><![CDATA[<h3>excel vba => Unicode => Icov => utf-8</h3>

<pre><code class="">#excel vba
Dim i As Integer
Dim WS_Count As Integer

file = "z:\workbook.xlsx"
csv = "z:\workbook.csv"

WS_Count = ActiveWorkbook.Worksheets.Count
For i = 1 To WS_Count
Dim ws As Worksheet

Set ws = ThisWorkbook.Worksheets(i)
    ws.Copy
    ActiveWorkbook.SaveAs Filename:=csv, _
        FileFormat:=xlUnicodeText
Next i
Application.DisplayAlerts = False
ActiveWorkbook.Close
Shell ("ruby X:\excel\send.rb")

Do
    If Dir(file) &lt;&gt; "" Then
        Exit Do
    End If
    DoEvents 'Prevents Excel from being unresponsive
    Application.Wait Now + TimeValue("0:00:01") 'wait for one second
Loop
Workbooks.Open file
</code></pre>

<pre><code class="ruby"># encoding: utf-8
require "net/ssh"
Net::SSH.start(host, user, :password =&gt; passwd ) do |ssh|
    puts ssh.exec! "ruby excel.rb"
end
</code></pre>

<pre><code class="ruby ">require 'csv'
require 'iconv'
file_path = "/tmp/workbook.csv"
f = IO.read(file_path)
Iconv.iconv('utf-8', 'unicode', f).join.split("\r\n")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net-ssh]]></title>
    <link href="http://icps0610.github.io/blog/2018/04/19/net-ssh/"/>
    <updated>2018-04-19T20:15:35+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/04/19/net-ssh</id>
    <content type="html"><![CDATA[<p><code>Net::SSH::Authentication::AgentError: could not get identity count</code></p>

<p><code>eval "$(ssh-agent)";</code></p>

<pre><code class="ruby">ENV['SSH_AUTH_SOCK'] = `ssh-agent`.split("\n")[0].scan(/SSH_AUTH_SOCK=(.*); e/).join
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Holiday]]></title>
    <link href="http://icps0610.github.io/blog/2018/04/11/holiday/"/>
    <updated>2018-04-11T23:58:57+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/04/11/holiday</id>
    <content type="html"><![CDATA[<h3><a href="http://www.319papago.idv.tw/holiday/2017-hr/2017_HR.html">http://www.319papago.idv.tw/holiday/2017-hr/2017_HR.html</a></h3>

<pre><code class="ruby">require 'rubyXL'

def holiday
    file_path = '107.xlsx'
    workbook  = RubyXL::Parser.parse(file_path)
    worksheet = workbook[0]
    xl = [1,  8, 15]
    yl = [4, 16, 28, 42]
    hl = [5,  5,  6,  6]
    (0..3).map do |y|
        (0..2).map do |x|
            (0..(7 * hl[y]-1)).map do |i|
                cx = xl[x] + i % 7
                cy = yl[y] + (i / 7) * 2
                cell = worksheet[cy][cx]
                cell.fill_color if cell.value
            end.compact
        end
    end.flatten(1)
end

def check_holiday(data, m, d)
    data[m-1][d-1] == "FFFF99FF" ? true : false
end

def check_check_holiday(h)
    ans = [true, false, true, true, true, false, true, false, true, true, true, false]
    ans.each_with_index do |a, idx|
        idx += 1
        if not check_holiday(h, idx, idx) == a
            return false
        end
    end
    return true
end

h = holiday
p check_check_holiday(h)
</code></pre>
]]></content>
  </entry>
  
 </feed>
