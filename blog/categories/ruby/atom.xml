<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2017-08-19T05:55:00+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lan]]></title>
    <link href="http://icps0610.github.io/blog/2017/08/19/lan/"/>
    <updated>2017-08-19T05:20:51+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/08/19/lan</id>
    <content type="html"><![CDATA[<pre><code class="ruby">class Lan
  def initialize
    @thread = 30
    @width = 15
    @log_file = "log"
    @lan = get_lan[1]
    @log = []
    @wait = 300
    @read_log_wait = 10
    puts "#{@lan}0/24"

    read_log.each_slice(@thread).each do |list|
      threads = [] ; line = []
      list.each do |ip|
        threads &lt;&lt; Thread.new { line &lt;&lt; error( ip) }
      end
      threads.each { |t| t.join }
      display(line, list)
      line.map{|p,ip| ip if p == " ■"}.compact.each{|ip| @log &lt;&lt; ip } if not File.exist? @log_file
    end
    @log.each{|l| `echo #{l} &gt;&gt; #{@log_file}`} if not File.exist? @log_file
    puts
  end

  def get_lan
    ip  = `ifconfig | grep cast`.split("\n").map{|i|i.scan(/\d+\.\d+\.\d+\.\d+/)[0]}
    lan = ip.map{|i|i.scan(/(\d*\.\d*\.\d*\.)\d*/).join}
  end

  def read_log
    begin
      @wait = @read_log_wait
      IO.binread(@log_file).split("\n")
    rescue
      (1..254).to_a.map{|i| "#{@lan}#{i}"}
    end
  end

  def error(ip)
    `fping #{ip} -t #{@wait}`.match("alive") == nil ? [" □", ip] :  [" ■", ip]
  end

  def display(line, ip)
    line = line.map{|p,ip|[p,ip.split(".")[3].to_i]}.sort_by{|p,ip|ip}.map{|p,ip|[p,ip.to_s.rjust(3,'000')]}
    ip.each_index do |i|
      print "#{line[i].join}"
      print "\n" if line[i][1].to_i % @width == 0
    end
  end
end
Lan.new
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake_mac]]></title>
    <link href="http://icps0610.github.io/blog/2017/08/17/fake-mac/"/>
    <updated>2017-08-17T00:27:25+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/08/17/fake-mac</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#http://standards-oui.ieee.org/oui.txt

def random_mac
  m = (0..15).map{|i|i.to_s(16).upcase}
  (0..2).map{"-"+(0..1).map{m.sample}.join}.join
end

def mac_address(co)
  mac_co = co.sample
  puts mac_company = mac_co[1]
  puts mac = mac_co[0]+random_mac
end

list = File.readlines('oui.txt').map{|i|i.split("\n").join.scan(/(.{8})\s*\(hex\)\W*(.*)\r/)[0]}.compact
mac_address(list)

word = "D-link".downcase
list = list.map{|m, c| [m,c] if not c.downcase.match(/.*#{word}.*/)}.compact
mac_address(list)

#dev = "eth0"
#`ifconfig #{dev} down`
#`macchanger -m #{mac} #{dev}`
#`ifconfig #{dev} up`
#`macchanger -s #{dev}`
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ssh]]></title>
    <link href="http://icps0610.github.io/blog/2017/08/14/ssh/"/>
    <updated>2017-08-14T18:21:12+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/08/14/ssh</id>
    <content type="html"><![CDATA[<pre><code class="ruby">target = ARGV[0]
ip  = `ifconfig | grep cast`.split("\n").map{|i|i.scan(/\d+\.\d+\.\d+\.\d+/)[0]}
lan = ip.map{|i|i.scan(/(\d*\.\d*\.\d*\.)\d*/).join}

if lan.count &gt; 11 
  puts lan
  print "----------\n&gt; "
  ch = STDIN.gets.to_i
  lan = lan[ch-1]
end

system "/usr/bin/ssh #{[lan].join}#{target}"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Line-notify]]></title>
    <link href="http://icps0610.github.io/blog/2017/06/23/line-notify/"/>
    <updated>2017-06-23T20:45:29+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/06/23/line-notify</id>
    <content type="html"><![CDATA[<pre><code class="ruby">line = "https://notify-api.line.me/api/notify"
to    = ARGV[0]
msg   = ARGV[1]
image = ARGV[2]

case to
when "me"
  token = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
end
if image and File.exist?(image)
  cmd = "curl -X POST -H 'Authorization: Bearer #{token}' -F 'message=#{msg}' -F 'imageFile=@#{image}' #{line}"
elsif image == nil
  cmd = "curl -X POST -H 'Authorization: Bearer #{token}' -F 'message=#{msg}' #{line}"
else
  cmd = "curl -X POST -H 'Authorization: Bearer #{token}' -F 'message=file cant find' #{line}"
end

system cmd
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Json]]></title>
    <link href="http://icps0610.github.io/blog/2017/06/19/json/"/>
    <updated>2017-06-19T19:51:53+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/06/19/json</id>
    <content type="html"><![CDATA[<pre><code class="ruby">require 'net/http'
require 'uri'
require 'json'

uri = URI.parse('http://www.example.com/sample.json')
json = Net::HTTP.get(uri)
result = JSON.parse(json)
puts result
</code></pre>
]]></content>
  </entry>
  
 </feed>
