<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2018-10-03T18:14:01+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Iptocountry]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/03/iptocountry/"/>
    <updated>2018-10-03T17:54:18+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/03/iptocountry</id>
    <content type="html"><![CDATA[<h3><a href="http://software77.net/geo-ip/">http://software77.net/geo-ip/</a></h3>

<pre><code class="ruby">def prune(itc, idx, tmp, sort)
    tmp.first[1] = itc[idx][1]
    sort &lt;&lt; tmp.first
    return sort
end

def reorganize(itc, idx=0, tmp=[], sort=[])
    next_elemnt = itc[idx+1]
    if next_elemnt == nil
        return prune(itc, idx, tmp, sort)
    end
    if not next_elemnt[2] == itc[idx][2] and tmp == []
        sort &lt;&lt; itc[idx]
    elsif next_elemnt[2] == itc[idx][2]
        tmp &lt;&lt; itc[idx]
    else
        sort = prune(itc, idx, tmp, sort)
        tmp  = []
    end
    return reorganize(itc, idx+1, tmp, sort)
end

file = File.open("sort_iptocountry.txt", 'w')
file.truncate(file.size)
File.readlines("IpToCountry.txt").map do |line|
    l = line.gsub("\"", "").chomp.split(",")
    p line = [l[0], l[1], l[4], l[6]].join(",")
    file.write("#{line}\n")
end
file.close()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waitr-scoll]]></title>
    <link href="http://icps0610.github.io/blog/2018/09/24/waitr-scoll/"/>
    <updated>2018-09-24T20:38:17+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/09/24/waitr-scoll</id>
    <content type="html"><![CDATA[<h3><a href="https://github.com/p0deje/watir-scroll">https://github.com/p0deje/watir-scroll</a></h3>

<pre><code class="ruby">browser = Watir::Browser.new :firefox
browser.button(text: 'Click').scroll.by(0, 800)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove_black]]></title>
    <link href="http://icps0610.github.io/blog/2018/09/23/remove-black/"/>
    <updated>2018-09-23T16:39:45+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/09/23/remove-black</id>
    <content type="html"><![CDATA[<pre><code class="ruby"># encoding: utf-8
require "watir"
require 'rmagick'

def pixel_not_black(img, x, y)
    px = img.pixel_color(x, y)
    if px.red &gt; 16448 or px.green &gt; 16448 or px.blue &gt; 16448
        return true
    end
end

def locate_left(img)
    (0..img.rows).each do |i|
        if pixel_not_black(img, i, i)
            @x = i
            break
        end
    end
    locate_y(img, 0, @x)
end

def locate_right(img)
    x = img.columns/2 #雙螢幕
    (0..x).each do |i|
        if pixel_not_black(img, x - i, i)
            @x = x - i
            break
        end
    end
    locate_y(img, x, @x)
end

def locate_y(img, st, x)
    (0..img.rows).each do |i|
        y = (i - st).abs
        if pixel_not_black(img, x, y)
            return x, y
        end
    end
end

#screenshot = Magick::Image.capture{ self.filename = "root" }
img = Magick::ImageList.new.read("/tmp/image/base.jpg")
lx, ly = locate_left(img)
rx, ry = locate_right(img)
img.crop!(lx, ly, rx-lx, ry-ly)
img.write("/tmp/image/base1.jpg")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Infinity]]></title>
    <link href="http://icps0610.github.io/blog/2018/09/18/infinity/"/>
    <updated>2018-09-18T17:10:30+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/09/18/infinity</id>
    <content type="html"><![CDATA[<h3>Infinity</h3>

<h3>ref <a href="https://stackoverflow.com/questions/5778295/how-to-express-infinity-in-ruby">https://stackoverflow.com/questions/5778295/how-to-express-infinity-in-ruby</a></h3>

<p>PositiveInfinity = +1.0/0.0
=> Infinity</p>

<p>NegativeInfinity = -1.0/0.0
=> -Infinity</p>

<p>CompleteInfinity = NegativeInfinity..PositiveInfinity
=> -Infinity..Infinity</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moto]]></title>
    <link href="http://icps0610.github.io/blog/2018/06/27/moto/"/>
    <updated>2018-06-27T01:14:07+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/06/27/moto</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
require 'rmagick'

def add_number(canvas, file, x, y, h)
    image = Magick::ImageList.new(file).crop!(0, h, 63, 90)
    canvas.composite!(image, x, y, Magick::OverCompositeOp)
end

number = "98765"
x, y = 1232, 1361
canvas = Magick::Image.read("base.png").first
number.split(//).each_with_index do |n, i|
    xn = x + i * 87
    yn = y + rand(0..3)
    add_number(canvas, "w.png", xn, yn, n.to_i * 80)
end
add_number(canvas, "b.png", 1662, 1353, rand(0..720))
canvas.write("/tmp/moto.png")
</code></pre>
]]></content>
  </entry>
  
 </feed>
