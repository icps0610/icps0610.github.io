<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2018-10-21T17:27:58+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ta]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/21/ta/"/>
    <updated>2018-10-21T16:37:50+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/21/ta</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
def tar(file, ext)
    case ext
    when /tar.bz2/
        "tar jcvf #{file} [DIR]\ntar jxvf #{file}\n"
    when /tar.bz/
        "tar jxvf #{file}"
    when /tar.gz/
        "tar zcvf #{file} [DIR]\ntar zxvf #{file}\n"
    when /tar.tgz/
        "tar zcvf #{file} [DIR]\ntar zxvf #{file}\n"
    when /tar.xz/
        "tar Jcvf #{file} [DIR]\ntar Jxvf #{file}\n"
    when /tar.Z/
        "tar Zcvf #{file} [DIR]\ntar Zxvf #{file}\n"
    when /tar/
        "tar cvf #{file} [DIR]\ntar xvf #{file}\n"
    when "gz"
        "gzip #{file}\ngzip -d #{file}\n"
    when /bz/
        "bunzip2 #{file}"
    when /bz2/
        "bzip2 -z #{file}"
    when /xz/
        "xz -z #{file}\nxz -d #{file}\n"
    when /Z/
        "uncompress #{file}"
    when /tgz/
        "tar zcvf #{file} [DIR]\ntar zxvf #{file}\n"
    when /7z/
        "7z a #{file} [DIR]\n7z a #{file}.7z [DIR] -p[PASSWORD]\n7z x #{file}\n"
    when /zip/
        "zip #{file} [DIR]\nunzip #{file}\n"
    when /rar/
        "rar a #{file} [DIR]\nrar e #{file}\nrar x #{file} [DIR]\n"
    when /lha/
        "lha -a #{file} [DIR]\nlha -e #{file}\n"
    else
        ext = "nil" if ext == ""
        "error\n#{file}\n#{ext}\n"
    end
end
file = ARGV[0]
if not file
    puts "ta.rb filename"
    exit
end
ext = File.basename(file).scan(/\.(.*)/).join
puts tar(file, ext)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cpr]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/20/cpr/"/>
    <updated>2018-10-20T23:09:11+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/20/cpr</id>
    <content type="html"><![CDATA[<pre><code class="ruby">source = ARGV[0]
to     = ARGV[1]
system("rsync -aAXv #{source}/* #{to} | pv -ls `find #{source}|wc -l` &gt;/dev/null")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/15/debug/"/>
    <updated>2018-10-15T21:19:16+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/15/debug</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>ref <a href="https://stackoverflow.com/questions/2603617/ruby-print-the-variable-name-and-then-its-value">https://stackoverflow.com/questions/2603617/ruby-print-the-variable-name-and-then-its-value</a></p></blockquote></blockquote>

<pre><code class="ruby">def dbg(a, s=nil, &amp;b)
    begin
        v = eval(a.to_s, b.binding)
    rescue Exception =&gt; e
        v = e.to_s.split("\n").first
    end
    s = " ------ " if s == 1
    v = "nil" if v.to_s == ""
    puts "#{s}#{a} : #{v}#{s}" if not @dbg == 0
end
#dbg(:var) {}
#@dbg = 0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Days]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/14/days/"/>
    <updated>2018-10-14T15:42:13+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/14/days</id>
    <content type="html"><![CDATA[<pre><code class="ruby">def leap_year(y)
    y % 4 == 0 &amp;&amp; y % 100 != 0 || y % 400 == 0
end

def md(y)
    if leap_year(y)
        [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    else
        [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    end
end

def days(date)
    year, month, day = date.split("/").map(&amp;:to_i)
    y = year - 1
    years  = y * 365 + (y / 4 - y / 100 + y / 400)
    months = md(year)[1..(month - 1)].sum
    years + months + day
end

def between(sdate, edate)
    (days(edate) - days(sdate)).abs
end

sdate = '1900/1/1'
edate = '2018/12/28'

p between(sdate, edate)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pycall]]></title>
    <link href="http://icps0610.github.io/blog/2018/10/07/pycall/"/>
    <updated>2018-10-07T11:44:45+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/10/07/pycall</id>
    <content type="html"><![CDATA[<pre><code class="ruby">require 'pycall/import'
include PyCall::Import
</code></pre>
]]></content>
  </entry>
  
 </feed>
