<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2016-11-14T19:31:52+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stack_level_too_deep]]></title>
    <link href="http://icps0610.github.io/blog/2016/07/30/stack-level-too-deep/"/>
    <updated>2016-07-30T21:04:56+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/07/30/stack-level-too-deep</id>
    <content type="html"><![CDATA[<p>stack level too deep</p>

<p>export RUBY_THREAD_VM_STACK_SIZE=999999</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File_list]]></title>
    <link href="http://icps0610.github.io/blog/2016/07/26/file-list/"/>
    <updated>2016-07-26T19:20:57+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/07/26/file-list</id>
    <content type="html"><![CDATA[<pre><code class="ruby"># `find test  -type f | xargs ls`.split("\n")
def dir(file)
  file.each do |f|
    if File.directory?(f) == true
      file=`ls #{f}`.split("\n").map{|i|f+"\\"+i}
      dir(file)
    else
      `ls #{f}`.split("\n").each do |i|
        system "rm #{i}"
        system "touch #{i}"
      end
    end
  end
end
target="D:\\Thunder\\XLGameBox\\"
file=`ls #{target}`.split("\n").map{|i|target+i}
dir(file)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[因數分解]]></title>
    <link href="http://icps0610.github.io/blog/2016/07/11/factor/"/>
    <updated>2016-07-11T13:09:39+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/07/11/factor</id>
    <content type="html"><![CDATA[<pre><code class="ruby">def factor(n,f=2,result="")
  if n == 1 and (not result == "" and f &gt;= n/2)
    return result.chop
  elsif n%f == 0
    result+=f.to_s+"×"
    (n/f)%f == 0 ? factor(n/f,f,result) : factor(n/f,f+1,result)
  else
    factor(n,f+1,result)
  end
end

def reorganize(n)
  #Array項目內重複次數
  repeat=n.split("×").each_with_object(Hash.new(0)){|m,h|h[m]+= 1}
  return repeat.to_a.map{|x,y| "#{x}**#{y} × " }.join.chop.chop.chop
end
num = 29475
puts factor(num)
puts reorganize(factor(num))

# 3×3×5×5×131
# 3**2 × 5**2 × 131**1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ping_log]]></title>
    <link href="http://icps0610.github.io/blog/2016/07/08/ping/"/>
    <updated>2016-07-08T16:10:15+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/07/08/ping</id>
    <content type="html"><![CDATA[<p><img src="/images/ping.png" alt="ping.png" /></p>

<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
require 'colorize'
require '/data/ruby/chinese_num/chinese_num.rb'

def restore(where)
  if @break == 1
    `espeak -vzh '#{where}恢復' -s 250`
    @break = 0
  end
end

def record(time)
  `echo #{Time.now.strftime("%H:%M:%S")}, #{time} &gt;&gt; /tmp/ping.log`
end

def delay(ip,where,alert)
  time = `ping #{ip} -c 1 | awk '{print $7}' | grep time`.scan(/time=(.*)/).join.to_f
  if time == 0.0
    `espeak -vzh '#{where}斷線' -s 250`
    record(-10000.0)
    @break=1
  else
    puts time.to_s.blue+"   "+ip
    record(time)
    restore(where)
    if time &gt; alert
      `espeak -vzh '#{where}延遲#{Chinese_num.transform(time.to_i)}秒' -s 250`
    end
  end
end

def gnuplot
  tmp = IO.binread("/tmp/ping.log")
  count = tmp.split("\n").count
  count = 256 if count &lt; 256

  log_start = tmp.split("\n").first.scan(/(.*),.*/).join
  log_end = tmp.split("\n").last.scan(/(.*),.*/).join

  file = []
  file &lt;&lt; "set grid y"
  file &lt;&lt; "set yrange [0:]"
  file &lt;&lt; "set ylabel 'ms'"
  file &lt;&lt; "set xdata time"
  file &lt;&lt; "set timefmt '%H:%M:%S'"
  file &lt;&lt; "set xrange ['#{log_start}':'#{log_end}']"
  file &lt;&lt; "set format x '%H:%M:%S'"
  file &lt;&lt; "set xlabel '#{log_start} ~ #{log_end}'"
  file &lt;&lt; "set xtics 3600"
  file &lt;&lt; "set terminal png size #{count*5},480"
  file &lt;&lt; "set output '/tmp/ping.png'"
  file &lt;&lt; "set border 0"
  file &lt;&lt; "set style data lines"
  file &lt;&lt; "set style line 1 linecolor rgb '#0060ad' linetype 1 linewidth 1"
  file &lt;&lt; "plot '/tmp/ping.log' using 1:2 notitle linestyle 1"

  IO.binwrite('/tmp/ping.p',file.map{|i|i+"\r\n"}.join)
  system "gnuplot &lt; /tmp/ping.p"
  system "kill `ps aux | grep /usr/bin/display.im6 | awk '{print $2}'`"
end

@break = 0
@count = 0
loop do
  gnuplot if @count%120 == 0
  delay("168.95.1.1","中華電信",1000)
  sleep 5
  @count+=1
end
</code></pre>

<h4>語音</h4>

<p><code>espeak -vzh '測試'</code>  <a href="/blog/2016/06/17/espeak/">espeak</a></p>

<h4>繪圖</h4>

<p><code>gnuplot</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[產生隨機資料]]></title>
    <link href="http://icps0610.github.io/blog/2016/07/06/faker/"/>
    <updated>2016-07-06T11:56:35+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/07/06/faker</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/stympy/faker">https://github.com/stympy/faker</a></p>

<p><code>gem install faker</code>
<code>ruby
Faker::Name.first_name    
Faker::Internet.email
</code></p>
]]></content>
  </entry>
  
 </feed>
