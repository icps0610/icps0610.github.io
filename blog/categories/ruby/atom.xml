<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2017-10-23T00:59:48+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Argv]]></title>
    <link href="http://icps0610.github.io/blog/2017/10/23/argv/"/>
    <updated>2017-10-23T00:57:04+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/10/23/argv</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>ref <a href="https://mgleon08.github.io/blog/2016/08/30/optionparser/">https://mgleon08.github.io/blog/2016/08/30/optionparser/</a></p></blockquote></blockquote>

<pre><code class="ruby">require 'optparse'
class Help
  def initialize(arguments)
    @arguments = arguments
    @arguments = ["-h"] if @arguments == []
    parse_options
  end

  def parse_options
    options = OptionParser.new
    options.banner = 'Usage: Backup &amp; Restore [options]'
    options.separator ''
    options.separator 'options:'
    options.on('-r', '--backup', 'backup') { backup }
    options.on('-r', '--restroe', 'restroe') { restroe }

    options.on('-h', '--help', 'Show this message') { puts(options); exit }
    options.parse!(@arguments)
  end
 end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No_ri_no_rdoc]]></title>
    <link href="http://icps0610.github.io/blog/2017/08/21/no-ri-no-rdoc/"/>
    <updated>2017-08-21T20:27:38+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/08/21/no-ri-no-rdoc</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>ref  <a href="https://stackoverflow.com/questions/1381725/how-to-make-no-ri-no-rdoc-the-default-for-gem-install">https://stackoverflow.com/questions/1381725/how-to-make-no-ri-no-rdoc-the-default-for-gem-install</a></p></blockquote></blockquote>

<pre><code>ou just add following line to your local ~/.gemrc file (it is in your home folder)

gem: --no-document or you can add this line to the global gemrc config file. Here is how to find it (in Linux)

strace gem source 2&gt;&amp;1 | grep gemrc
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Wods Regex]]></title>
    <link href="http://icps0610.github.io/blog/2017/08/21/ruby-regex/"/>
    <updated>2017-08-21T04:15:41+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/08/21/ruby-regex</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>ref <a href="https://stackoverflow.com/questions/10678823/regex-format-for-two-strings">https://stackoverflow.com/questions/10678823/regex-format-for-two-strings</a></p></blockquote></blockquote>

<h3></h3>

<p><code>array = ["happy","good"]</code><br/>
<code>p array.map{|s|s.scan(/\b(hppy|good)\b/).join}</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lan]]></title>
    <link href="http://icps0610.github.io/blog/2017/08/19/lan/"/>
    <updated>2017-08-19T05:20:51+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/08/19/lan</id>
    <content type="html"><![CDATA[<pre><code class="ruby">class Lan
  def initialize
    @thread = 30
    @width = 15
    @log_file = "log"
    @lan = get_lan[1]
    @log = []
    @wait = 300
    @read_log_wait = 10
    puts "#{@lan}0/24"

    read_log.each_slice(@thread).each do |list|
      threads = [] ; line = []
      list.each do |ip|
        threads &lt;&lt; Thread.new { line &lt;&lt; error( ip) }
      end
      threads.each { |t| t.join }
      display(line, list)
      line.map{|p,ip| ip if p == " ■"}.compact.each{|ip| @log &lt;&lt; ip } if not File.exist? @log_file
    end
    @log.each{|l| `echo #{l} &gt;&gt; #{@log_file}`} if not File.exist? @log_file
    puts
  end

  def get_lan
    ip  = `ifconfig | grep cast`.split("\n").map{|i|i.scan(/\d+\.\d+\.\d+\.\d+/)[0]}
    lan = ip.map{|i|i.scan(/(\d*\.\d*\.\d*\.)\d*/).join}
  end

  def read_log
    begin
      @wait = @read_log_wait
      IO.binread(@log_file).split("\n")
    rescue
      (1..254).to_a.map{|i| "#{@lan}#{i}"}
    end
  end

  def error(ip)
    `fping #{ip} -t #{@wait}`.match("alive") == nil ? [" □", ip] :  [" ■", ip]
  end

  def display(line, ip)
    line = line.map{|p,ip|[p,ip.split(".")[3].to_i]}.sort_by{|p,ip|ip}.map{|p,ip|[p,ip.to_s.rjust(3,'000')]}
    ip.each_index do |i|
      print "#{line[i].join}"
      print "\n" if line[i][1].to_i % @width == 0
    end
  end
end
Lan.new
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake_mac]]></title>
    <link href="http://icps0610.github.io/blog/2017/08/17/fake-mac/"/>
    <updated>2017-08-17T00:27:25+08:00</updated>
    <id>http://icps0610.github.io/blog/2017/08/17/fake-mac</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#http://standards-oui.ieee.org/oui.txt

def random_mac
  m = (0..15).map{|i|i.to_s(16).upcase}
  (0..2).map{"-"+(0..1).map{m.sample}.join}.join
end

def mac_address(co)
  mac_co = co.sample
  puts mac_company = mac_co[1]
  puts mac = mac_co[0]+random_mac
end

list = File.readlines('oui.txt').map{|i|i.split("\n").join.scan(/(.{8})\s*\(hex\)\W*(.*)\r/)[0]}.compact
mac_address(list)

word = "D-link".downcase
list = list.map{|m, c| [m,c] if not c.downcase.match(/.*#{word}.*/)}.compact
mac_address(list)

#dev = "eth0"
#`ifconfig #{dev} down`
#`macchanger -m #{mac} #{dev}`
#`ifconfig #{dev} up`
#`macchanger -s #{dev}`
</code></pre>
]]></content>
  </entry>
  
 </feed>
