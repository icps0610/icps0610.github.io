<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2016-06-17T01:04:27+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unlockpattern]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/17/unlockpattern/"/>
    <updated>2016-06-17T00:56:20+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/17/unlockpattern</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
require 'rmagick'
class Up

  def all_possible
    (4..9).map do |i|
      @ok ||= 0
      "123456789".scan(/./).permutation(i).to_a.each do |c|
        @ok+=1 if check(c.to_a.join,0) == true
      end
    end
    return @ok
  end

  def rand_produce
    @canvas = Magick::ImageList.new
    @canvas.read("base.jpg")
    @draw = Magick::Draw.new
    code = produce_code
    draw_line(code)
    save(code)
  end

  def produce_code
    code="123456789".scan(/./).sample(9).to_a.join
    check(code,0)? code : produce_code
  end

  def check(code,i)
    if i == code.length-1
      return true
    else
      x=(code[i].to_i-1).divmod(3)
      y=(code[i+1].to_i-1).divmod(3)
      testx = (x[1]-y[1]).abs
      testy = (x[0]-y[0]).abs
      if (testx-testy).abs ==1
        check(code,i+1)
      elsif testx == 2 or testy == 2
        m = (code[i].to_i+code[i+1].to_i)/2
        code[0,i].match(m.to_s) == nil ? false : check(code,i+1)
      else
         check(code,i+1)
      end
    end
  end

  def location(i)
    base=i.to_i.divmod(3)
    if base[1] == 0
      x=base[1]+2
      y=base[0]-1
    else
      x=base[1]-1
      y=base[0]
    end
    return [50+100*x-5,50+100*y]
  end

  def draw_line(code)
    (0..code.length-2).each do |i|
      @draw.fill('red')
      @draw.line(location(code[i])[0],location(code[i])[1],location(code[i+1])[0],location(code[i+1])[1])
      if i == 0
        @draw.fill('blue')
        @draw.circle(location(code[i])[0],location(code[i])[1],location(code[i])[0]+6,location(code[i])[1]+6)
      elsif i == code.length-2
        @draw.fill('yellow')
        @draw.circle(location(code[i+1])[0],location(code[i+1])[1],location(code[i+1])[0]+6,location(code[i+1])[1]+6)
      end
    end
  end

  def save(code)
    text = Magick::Draw.new
    text.font_family = 'helvetica'
    text.pointsize = 14
    text.gravity = Magick::CenterGravity
    text.annotate(@canvas, 0,0,-5,-125, code)
    @draw.draw(@canvas)
    @canvas.display
    @canvas.write("code.jpg")
  end
end
unlockpattern=Up.new
puts unlockpattern.all_possible #所有可能
unlockpattern.rand_produce　#隨機產生
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby檔案操作]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/16/file/"/>
    <updated>2016-06-16T14:50:15+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/16/file</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#寫入檔案 w 寫 r讀 a附加
file = File.open("file.txt", 'w')
file.truncate(file.size)
file.write("hello")
file.close()
</code></pre>

<pre><code class="ruby">#讀取檔案每行
File.readlines('foo').each{|line| puts line }
</code></pre>

<pre><code class="ruby">#讀取檔案成字串
(IO.binread("test.txt"))
</code></pre>

<pre><code class="ruby">#列出檔案清單 dir ls
Dir.new("e:\\download").each{|x| puts x}
</code></pre>

<pre><code class="ruby">#目錄或檔案
File.directory?("name")
File.file?("name")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live_cd]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/15/live-cd/"/>
    <updated>2016-06-15T22:09:51+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/15/live-cd</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
`apt-get install squashfs-tools` if `dpkg-query -W | grep squashfs-tools` == ""

class Live

  def initialize
    iso_list
    puts "1.解壓縮#{@iso_name}.#{@iso_name_ext}的filesystem.squashfs 到 #{@filesystem}"
    puts "2.chroot #{@filesystem}"
    puts "3.將#{@filesystem}壓縮檔案製成光碟/tmp/#{@iso_name}.#{@iso_name_ext}"
    puts "4.將.\/#{@iso_name} 製作光碟"
    puts "-------------"
    choice=gets.chomp
    if choice == "1"
      extract
    elsif choice =="2"
      mount_system
    elsif choice =="3"
      zip_file
    elsif choice =="4"
      iso
    else
      initialize
    end
  end

  def iso_list
    @iso_name_ext="iso"
    list = `ls | grep #{@iso_name_ext}`.split("\n")
    if list.count &gt; 1
      puts "請選擇iso"
      list.each_index do |i|
        puts "#{i+1}. #{list[i]}"
      end
      puts "--------------"
      choice=gets.chomp
      if not choice == ""
        @iso_name=File.basename(list[choice.to_i-1],"."+@iso_name_ext)
      else
        iso_list
      end
    else
      @iso_name=File.basename(list[0],"."+@iso_name_ext)
    end
    @filesystem="#{@iso_name}_filesystem"
  end

  def iso_extract
    if File.exist?("#{@iso_name}")
      printf "\n是否移除舊 #{@iso_name}(y/n) : "
      `umout #{@iso_name} &amp;&amp; rm -rf #{@iso_name}` if gets.downcase.chomp == "y"
    end
    puts "將光碟#{@iso_name}.#{@iso_name_ext}掛載到.\/#{@iso_name}.."
    system("mkdir #{@iso_name} 2&gt; /dev/null")
    system("mount -o loop #{@iso_name}.#{@iso_name_ext} #{@iso_name}")

  end

  def extract
    iso_extract
    puts "解壓縮 filesystem.squashfs 到 #{@filesystem}"
    if File.exist?("#{@filesystem}")
      printf "\n是否移除舊  #{@filesystem}(y/n) : "
      `rm -rf #{@filesystem}` if gets.downcase.chomp == "y"
    end
    system("mount -o loop -t squashfs #{@iso_name}/casper/filesystem.squashfs /mnt/ ")
    system("rsync -aAXv /mnt/* #{@filesystem} | pv -ls `find /mnt|wc -l` &gt;/dev/null")
  end

  def mount_system
    puts "開始掛載..."
    system("umount /mnt/  2&gt;/dev/null")
    system("mount -o bind /dev/ #{@filesystem}/dev/ 2&gt;/dev/null")
    system("mount --bind /dev/pts #{@filesystem}/dev/pts 2&gt;/dev/null")
    system("mount -t proc procfs #{@filesystem}/proc/  2&gt;/dev/null")
    system("cp /etc/resolv.conf #{@filesystem}/etc/")
    system("chroot #{@filesystem}/ /bin/bash")
    system("umount #{@filesystem}/dev/pts")
    system("umount #{@filesystem}/proc/")
    system("umount #{@filesystem}/dev/")
  end

  def zip_file
    puts "開始壓縮檔案.."
    if not File.exist?("/tmp/#{@iso_name}")
      iso_extract
      system("rsync -a --exclude 'filesystem.squashfs' #{@iso_name} /tmp/  | pv -les $(df -i #{@iso_name} | perl -ane 'print $F[2] if $F[5] =~ m:^/:') &gt;/dev/null")
    end
    system("umount #{@filesystem}/dev/pts 2&gt;/dev/null")
    system("umount #{@filesystem}/proc/ 2&gt;/dev/null")
    system("umount #{@filesystem}/dev/ 2&gt;/dev/null")

    system("chroot #{@filesystem} dpkg-query -W --showformat='${Package} ${Version}\n' &gt; /tmp/#{@iso_name}/casper/filesystem.manifest")
    system("rm /tmp/#{@iso_name}/casper/filesystem.squashfs 2&gt;/dev/null")
    system("mksquashfs #{@filesystem} /tmp/#{@iso_name}/casper/filesystem.squashfs -comp xz")
    system("printf $( du -sx --block-size=1 #{@filesystem} | cut -f1) &gt; /tmp/#{@iso_name}/casper/filesystem.size")
    Dir.chdir("/tmp/#{@iso_name}")
    system("rm MD5SUMS")
    system("find -type f -print0 |  xargs -0 md5sum | grep -v isolinux/boot.cat |  tee MD5SUMS")
    system("mkisofs -input-charset iso8859-1 -r -D -V '/#{@iso_name}-icps' -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -graft-point -o /tmp/#{@iso_name}.#{@iso_name_ext} ../#{@iso_name}")
  end

  def iso
    puts "開始打包光碟.."
    #system("cp setup.rb /tmp/#{@iso_name}")
    #system("printf $( du -sx --block-size=1 #{@filesystem} | cut -f1) &gt; /tmp/#{@iso_name}/casper/filesystem.size")
    Dir.chdir("/tmp/#{@iso_name}")
    #system("rm MD5SUMS")
    #system("find -type f -print0 |  xargs -0 md5sum | grep -v isolinux/boot.cat |  tee MD5SUMS")
    system("mkisofs -input-charset iso8859-1 -r -D -V '/#{@iso_name}-icps' -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -graft-point -o /tmp/#{@iso_name}.#{@iso_name_ext} ../#{@iso_name}")
  end
end
Live.new
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ssh自動登入]]></title>
    <link href="http://icps0610.github.io/blog/2016/06/14/ssh-autologin/"/>
    <updated>2016-06-14T12:50:31+08:00</updated>
    <id>http://icps0610.github.io/blog/2016/06/14/ssh-autologin</id>
    <content type="html"><![CDATA[<pre><code class="ruby"># encoding: utf-8
if `gem list | grep net-ssh` == ""
  puts "缺少套件net-ssh net-scp 準備安裝.."
  `gem install net-ssh net-scp --no-ri --no-rdoc`
end
require "net/ssh"
require "net/scp"
$localip=`ifconfig | grep Bcast | cut -d :  -f 2 | cut -d " " -f 1`.chomp
$localuser=ENV['USER']
$ip=[]
$ip &lt;&lt; ["192.168.1.100","test","test"]

class SSH_n_1

  def initialize
    puts "本地端為SSH主機,#{$localuser}@#{$localip}"
    puts
    $ip.each do |host,user,passwd|
      if system("nc -nz -w 1 #{host} 22") == true
        puts "&gt;&gt; #{host}連線正常"
        puts "   #{host}產生ssh key"
        if user == "root"
          @home="/#{user}"
        else
          @home="/home/#{user}"
        end
        script(host,user,passwd)
        puts "   #{host}下載ssh key"
        download_key(host,user,passwd)
        `mkdir ~/.ssh 2&gt; /dev/null`
        `chmod go-w ~`
        `chmod 700 ~/.ssh`
        `chmod 600 ~/.ssh/authorized_keys`
        `sed -i /#{user}@#{@hostname}/d ~/.ssh/authorized_keys`
        `cat #{$localip}.pub &gt;&gt; ~/.ssh/authorized_keys`

        puts "   USER: #{user} 已完成"
      else
        puts "&gt;&gt; #{host} 沒有回應"
      end
      puts
    end
  end

  def download_key(host,user,passwd)
    Net::SCP.download!(host,user, "#{@home}/.ssh/#{$localip}.pub", "#{$localip}.pub",  :ssh =&gt; { :password =&gt; passwd })
  end

  def script(host,user,passwd)
    Net::SSH.start(host,user, :password =&gt; passwd ) do |ssh|
      @hostname=ssh.exec!("hostname").chomp
      ssh.exec!("mkdir ~/.ssh")
      ssh.exec!("chmod 700 ~/.ssh")
      ssh.exec!("rm #{@home}/.ssh/#{$localip}")
      ssh.exec!("rm #{@home}/.ssh/#{$localip}.pub")
      ssh.exec!("ssh-keygen -t rsa -f #{@home}/.ssh/#{$localip} -N '' -q")
      ssh.exec!("sed -i '/HOST #{$localip}/,+1d' #{@home}/.ssh/config")
      ssh.exec!("echo HOST #{$localip} &gt;&gt; #{@home}/.ssh/config")
      ssh.exec!("echo IdentityFile ~/.ssh/#{$localip} &gt;&gt; #{@home}/.ssh/config")
    end
  end

end

class SSH_1_n

  def initialize
    puts "IP列表為SSH主機, 使用者: #{$localuser}"
    @hostname=`hostname`.chomp
    puts "產生ssh key..."
    ssh_keygen

    $ip.each do |host,user,passwd|
      if system("nc -nz -w 1 #{host} 22") == true
        puts "&gt;&gt; #{host}連線正常"
        puts "   上傳key到 #{host}"
        upload_key(host,user,passwd)
        puts "   #{host} 執行指令"
        script(host,user,passwd)
        `sed -i '/HOST #{host}/,+1d' ~/.ssh/config 2&gt;/dev/null`
        `echo HOST #{host} &gt;&gt; #{ENV['HOME']}/.ssh/config`
        `echo IdentityFile #{ENV['HOME']}/.ssh/#{$localip} &gt;&gt; #{ENV['HOME']}/.ssh/config`
        puts "   &gt;&gt; #{user}@#{host}"
      else
        puts "&gt;&gt; #{host} 沒有回應"
      end
      puts
    end
  end

  def upload_key(host,user,passwd)
    Net::SCP.upload!(host,user, "#{ENV['HOME']}/.ssh/#{$localip}.pub", "id_rsa.pub",  :ssh =&gt; { :password =&gt; passwd })
  end

  def script(host,user,passwd)
    Net::SSH.start(host,user, :password =&gt; passwd ) do |ssh|
      ssh.exec!("sed -i /#{ENV['USER']}@#{@hostname}/d ~/.ssh/authorized_keys")
      ssh.exec!("mkdir ~/.ssh")
      ssh.exec!("cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys")
      ssh.exec!("chmod go-w ~")
      ssh.exec!("chmod 700 ~/.ssh")
      ssh.exec!("chmod 600 ~/.ssh/authorized_keys")
    end
  end

  def ssh_keygen
    if not File.exist?("#{ENV['HOME']}/.ssh/#{$localip}")
      system("ssh-keygen -t rsa -f #{ENV['HOME']}/.ssh/#{$localip} -N '' -q")
    end
  end

end
</code></pre>
]]></content>
  </entry>
  
</feed>
