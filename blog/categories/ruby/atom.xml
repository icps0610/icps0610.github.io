<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | icps]]></title>
  <link href="http://icps0610.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://icps0610.github.io/"/>
  <updated>2018-09-24T21:35:28+08:00</updated>
  <id>http://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Waitr-scoll]]></title>
    <link href="http://icps0610.github.io/blog/2018/09/24/waitr-scoll/"/>
    <updated>2018-09-24T20:38:17+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/09/24/waitr-scoll</id>
    <content type="html"><![CDATA[<h3><a href="https://github.com/p0deje/watir-scroll">https://github.com/p0deje/watir-scroll</a></h3>

<pre><code class="ruby">browser = Watir::Browser.new :firefox
browser.button(text: 'Click').scroll.by(0, 800)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove_black]]></title>
    <link href="http://icps0610.github.io/blog/2018/09/23/remove-black/"/>
    <updated>2018-09-23T16:39:45+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/09/23/remove-black</id>
    <content type="html"><![CDATA[<pre><code class="ruby"># encoding: utf-8
require "watir"
require 'rmagick'

def pixel_not_black(img, x, y)
    px = img.pixel_color(x, y)
    pc = [px.red, px.green, px.blue].map {|n| n/256 }
    pc.each {|p| return true if p &gt; 87 }
end

def locate_x_left(img)
    if pixel_not_black(img, 0, 0)
        return 0, 0
    end
    (0..img.rows).each do |i|
        if pixel_not_black(img, i, i)
            return locate_y(img, "left", i, i)
        end
    end
end

def locate_x_right(img)
    x = 1920
    if pixel_not_black(img, x, 0)
        return x, 0
    end
    (0..x).each do |i|
        if pixel_not_black(img, x - i, i)
            return locate_y(img, "right", x - i, i)
        end
    end
end

def locate_y(img, direction, x, y)
    direction == "right" ? i = 1 : i = -1
    if pixel_not_black(img, x, y) and pixel_not_black(img, x, y + i)
        locate_y(img, direction, x, y + i)
    else
        return x, y
    end
end

#screenshot = Magick::Image.capture{ self.filename = "root" }
img = Magick::ImageList.new.read("/tmp/image/base0.jpg")
lx, ly = locate_x_left(img)
rx, ry = locate_x_right(img)
img.crop!(lx, ly, rx-lx, ry-ly)
img.write("/tmp/image/base2.jpg")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moto]]></title>
    <link href="http://icps0610.github.io/blog/2018/06/27/moto/"/>
    <updated>2018-06-27T01:14:07+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/06/27/moto</id>
    <content type="html"><![CDATA[<pre><code class="ruby">#!/usr/bin/env ruby
# encoding: utf-8
require 'rmagick'

def add_number(canvas, file, x, y, h)
    image = Magick::ImageList.new(file).crop!(0, h, 63, 90)
    canvas.composite!(image, x, y, Magick::OverCompositeOp)
end

number = "98765"
x, y = 1232, 1361
canvas = Magick::Image.read("base.png").first
number.split(//).each_with_index do |n, i|
    xn = x + i * 87
    yn = y + rand(0..3)
    add_number(canvas, "w.png", xn, yn, n.to_i * 80)
end
add_number(canvas, "b.png", 1662, 1353, rand(0..720))
canvas.write("/tmp/moto.png")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read_csv_encoding]]></title>
    <link href="http://icps0610.github.io/blog/2018/04/21/vba-excel-csv-and-use-ruby-read/"/>
    <updated>2018-04-21T19:43:25+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/04/21/vba-excel-csv-and-use-ruby-read</id>
    <content type="html"><![CDATA[<h3>excel vba => Unicode => Icov => utf-8</h3>

<pre><code class="">#excel vba
Dim i As Integer
Dim WS_Count As Integer

file = "z:\workbook.xlsx"
csv = "z:\workbook.csv"

WS_Count = ActiveWorkbook.Worksheets.Count
For i = 1 To WS_Count
Dim ws As Worksheet

Set ws = ThisWorkbook.Worksheets(i)
    ws.Copy
    ActiveWorkbook.SaveAs Filename:=csv, _
        FileFormat:=xlUnicodeText
Next i
Application.DisplayAlerts = False
ActiveWorkbook.Close
Shell ("ruby X:\excel\send.rb")

Do
    If Dir(file) &lt;&gt; "" Then
        Exit Do
    End If
    DoEvents 'Prevents Excel from being unresponsive
    Application.Wait Now + TimeValue("0:00:01") 'wait for one second
Loop
Workbooks.Open file
</code></pre>

<pre><code class="ruby"># encoding: utf-8
require "net/ssh"
Net::SSH.start(host, user, :password =&gt; passwd ) do |ssh|
    puts ssh.exec! "ruby excel.rb"
end
</code></pre>

<pre><code class="ruby ">require 'csv'
require 'iconv'
file_path = "/tmp/workbook.csv"
f = IO.read(file_path)
Iconv.iconv('utf-8', 'unicode', f).join.split("\r\n")
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Net-ssh]]></title>
    <link href="http://icps0610.github.io/blog/2018/04/19/net-ssh/"/>
    <updated>2018-04-19T20:15:35+08:00</updated>
    <id>http://icps0610.github.io/blog/2018/04/19/net-ssh</id>
    <content type="html"><![CDATA[<p><code>Net::SSH::Authentication::AgentError: could not get identity count</code></p>

<p><code>eval "$(ssh-agent)";</code></p>

<pre><code class="ruby">ENV['SSH_AUTH_SOCK'] = `ssh-agent`.split("\n")[0].scan(/SSH_AUTH_SOCK=(.*); e/).join
</code></pre>
]]></content>
  </entry>
  
 </feed>
