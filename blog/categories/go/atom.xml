<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go | icps]]></title>
  <link href="https://icps0610.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="https://icps0610.github.io/"/>
  <updated>2021-10-11T00:45:41+08:00</updated>
  <id>https://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go]]></title>
    <link href="https://icps0610.github.io/blog/2019/05/15/go/"/>
    <updated>2019-05-15T15:34:10+08:00</updated>
    <id>https://icps0610.github.io/blog/2019/05/15/go</id>
    <content type="html"><![CDATA[<h6>PrintError</h6>

<pre><code>"runtime"

func printError(err error, str ...string) {
    if err != nil {
        pc, _, _, _ := runtime.Caller(1)
        fmt.Println(runtime.FuncForPC(pc).Name())
        fmt.Println(err)
        for _, s := range str {
            fmt.Println(s)
        }
    }
}
</code></pre>

<h3>cmd</h3>

<h6>toEXE</h6>

<pre><code class="">windoes/linux amd64/386
GOOS=windows GOARCH=amd64 go build -o hello.exe hello.go

GOOS=windows GOARCH=amd64 go build  -ldflags -H=windowsgui -o hello.exe hello.go
//hide windows
</code></pre>

<h6>convert</h6>

<p><code>https://mholt.github.io/curl-to-go/</code> <br/>
<code>https://mholt.github.io/json-to-go/</code>
<code>https://github.com/Terry-Mao/paint</code></p>

<h6>argv</h6>

<p><code>os.Args[1]</code></p>

<h5>run command</h5>

<pre><code class="go">

func runCmd(cmd string) {
    c := exec.Command(cmd)
    _, err := c.CombinedOutput()
    printError(err)
}

func runCmd(cmd string) {
    c, err := exec.Command("bash", "-c", cmd).Output()
    fmt.Println()
    printError(err, string(c))
}
</code></pre>

<h5>ipconfig</h5>

<pre><code class="go">ifaces, _ := net.Interfaces()
// handle err
for _, i := range ifaces {
    addrs, _ := i.Addrs()
    // handle err
    for _, addr := range addrs {
        var ip net.IP
        switch v := addr.(type) {
        case *net.IPNet:
            ip = v.IP
        case *net.IPAddr:
            ip = v.IP
        }
        fmt.Println(ip)
    }
}
</code></pre>

<h5>checkUrl</h5>

<pre><code class="go">func checkUrl(url string) bool {
    resp, err := http.Head(url)
    if err != nil {
        return false
    }
    if resp.StatusCode != http.StatusOK {
        return false
    }
    return true
}
</code></pre>

<h5>screenShot</h5>

<pre><code class="go">"github.com/kbinani/screenshot"
"github.com/oliamb/cutter"
"image"
"image/png"

func getScreenshot(px, py, width, height int, imageName string) {
    bounds := screenshot.GetDisplayBounds(0)

    img, err := screenshot.CaptureRect(bounds)
    if err != nil {
        fmt.Println(err)
    }
    file, _ := os.Create(imageName)
    defer file.Close()

    croppedImg, err := cutter.Crop(img, cutter.Config{
        Anchor: image.Point{px, py},
        Width:  width,
        Height: height,
    })

    png.Encode(file, croppedImg)
    sleep(delay)
}
</code></pre>

<h4>list file</h4>

<pre><code class="go">//"path/filepath"
func listFile(root string) []string {
    var files []string
    err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
        if regexMatch(path, `.*\.jpg`) {
            files = append(files, path)
        }
        return nil
    })
    printError(err)
    return files[1:]
}
</code></pre>

<pre><code class="go">"github.com/oliamb/cutter"
"github.com/sclevine/agouti"
"image"
"image/png"
func getScreenshot(page *agouti.Page, px, py, width, height int, imageName string) {
    page.Screenshot(imageName)

    f, err := os.Open(imageName)
    if err != nil {
        fmt.Println("Cannot open file", err)
    }
    img, _, err := image.Decode(f)
    if err != nil {
        fmt.Println("Cannot decode image:", err)
    }
    file, _ := os.Create(imageName)
    defer file.Close()

    croppedImg, err := cutter.Crop(img, cutter.Config{
        Anchor: image.Point{px, py},
        Width:  width,
        Height: height,
    })

    png.Encode(file, croppedImg)
    sleep(delay)
}
</code></pre>

<h6>curl</h6>

<pre><code class="go">import (
    "io/ioutil"
)
resp, err := http.Get(url)
if err != nil {
    // handle err
}
defer resp.Body.Close()
body, e := ioutil.ReadAll(resp.Body)

if e != nil {
   // handle err
}
string(body)
</code></pre>

<h6>input</h6>

<pre><code class="go">
func getInput ()  {
    var key string
   fmt.Scanln(&amp;key)
 return key
}


reader := bufio.NewReader(os.Stdin)
fmt.Print("file: ")
ipt, _ := reader.ReadString('\n')
input := strings.TrimSuffix(ipt, "\n")
return input
</code></pre>

<h5>continue</h5>

<pre><code class="go">fmt.Print("Press 'Enter' to continue...")
bufio.NewReader(os.Stdin).ReadBytes('\n')
</code></pre>

<h6>IO</h6>

<pre><code class="go">"io/ioutil"

#save&amp;read

func save(content, path string) {
    err := ioutil.WriteFile(path, []byte(content), 0644)
    printError(err)
}

func read(path string) string{
    dat, err := ioutil.ReadFile(path)
    printError(err)
    return string(dat)
}



func saveLines(lines []string, path string) {
    file, err := os.Create(path)
    printError(err)
    defer file.Close()
    //file.WriteString("\xEF\xBB\xBF")
    for _, line := range lines {
        file.WriteString(line + "\n")
    }
}

import(
    "golang.org/x/text/encoding/traditionalchinese"
    "golang.org/x/text/transform"
)
"io/ioutil"
"strings"

func readFile(path string) []string {
    dat, err := ioutil.ReadFile(path)
    printError(err)
    var lines []string
    for _, l := range strings.Split(string(dat), "\n") {
        //str, _, _ := transform.String(traditionalchinese.Big5.NewDecoder(), str2)
        //str2, _, _ := transform.String(traditionalchinese.Big5.NewEncoder(), str)
        lines = append(lines, l)
    }
    return lines
}

//win utf-16 le to utf-8
import "github.com/malexdev/utfutil"
d, _ := utfutil.ReadFile("txt", utfutil.UTF8)
c := string(d)


func appendFile(path string, data []string) {
    f, err := os.OpenFile(path, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
    if err != nil {
        log.Println(err)
    }
    defer f.Close()

    for _, line := range data {
        f.WriteString(line + "n")
    }

}
</code></pre>

<blockquote><blockquote><p>ref <a href="https://stackoverflow.com/questions/20875336/how-can-i-get-a-files-ctime-atime-mtime-and-change-them">https://stackoverflow.com/questions/20875336/how-can-i-get-a-files-ctime-atime-mtime-and-change-them</a></p>

<h5>mtime</h5></blockquote></blockquote>

<pre><code class="go">func statTimes(name string) (atime, mtime, ctime time.Time, err error) {
    fi, err := os.Stat(name)
    if err != nil {
        fmt.Println(err)
    }
    mtime = fi.ModTime()
    stat := fi.Sys().(*syscall.Stat_t)
    atime = time.Unix(int64(stat.Atim.Sec), int64(stat.Atim.Nsec))
    ctime = time.Unix(int64(stat.Ctim.Sec), int64(stat.Ctim.Nsec))
    return
}
</code></pre>

<h5>stringCH</h5>

<pre><code class="go">func checkWordsCH(words string) {
    for _, w := range words {
        if unicode.Is(unicode.Han, w) == true {

        }
    }
}
</code></pre>

<h6>Json</h6>

<pre><code class="go">"encoding/json"
"io/ioutil"

type Employee struct {
    Name string
    Age  int
}

type List struct {
    ID []*Employee
}

func readJson(path string) []City {
    file, err := ioutil.ReadFile(path)
    printError(err)
    var reaJson []City
    err = json.Unmarshal([]byte(file), &amp;reaJson)
    printError(err)
    return reaJson
}

func saveJson(data interface{}, path string) {
    file, err := json.MarshalIndent(data, "", " ")
    printError(err)
    _ = ioutil.WriteFile(path, file, 0644)
}
fname := "user.json"
saveJson(fname, p)
reaJson := readJson(fname)
ffmt.Puts(reaJson[0].Name)
</code></pre>

<pre><code class="go">var c map[string][]map[string]interface{}
var cs []string
json.Unmarshal([]byte(str), &amp;c)

t := c["content_elements"]

for _, e := range t {
    c := e["content"]
    if c != nil {
        cs = append(cs, fmt.Sprintf("%s", c))
    }
}
return cs
</code></pre>

<h6>Csv</h6>

<pre><code class="go">"encoding/csv"
func readCsv(path string) [][]string {
    f, err := os.Open(path)
    printError(err)
    lines, err := csv.NewReader(f).ReadAll()
    return lines
}

func writeCsv(lines [][]string, path string) {
    file, err := os.Create(path)
    printError(err)
    defer file.Close()
    file.WriteString("\xEF\xBB\xBF")
    for _, line := range lines {
        file.WriteString(strings.Join(line, ", ") + "\n")
    }
}
</code></pre>

<h5>pwd</h5>

<pre><code class="go">import(
    "os"
    "path/filepath"
)

dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
dir, err := os.Getwd()
</code></pre>

<h6>filepath</h6>

<pre><code class="go">import "path/filepath"
dir, file := filepath.Split("/go/go.mod")

fmt.Println(dir)
fmt.Println(file)
</code></pre>

<h6>fileExist</h6>

<pre><code class="go">func fileExist(file string) bool {
  if _, err := os.Stat(file); err != nil {
    if os.IsNotExist(err) {
      return false
    }
  }
  return true
}
</code></pre>

<h6>exec</h6>

<pre><code class="go">cmd := exec.Command("sleep", "1")
err := cmd.Run()
</code></pre>

<h6>ã€€list Fo;e</h6>

<pre><code> "path/filepath"

func listFile(root string) []string {
    var files []string
    err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
        files = append(files, path)
        return nil
    })
    printError(err)
    return files[1:]
}
</code></pre>

<h5>imageSize</h5>

<pre><code>func getImageSize(file string) (string, string) {
    cmd = fmt.Sprintf(`identify %s`, file)
    c := runCmd(cmd)
    size := strings.Split(strings.Split(c, " ")[2], "x")
    return size[0], size[1]
}
</code></pre>

<h3>debug</h3>

<h5>time</h5>

<pre><code class="go">func debug() {
    fmt.Println("=&gt; ", time.Now().Sub(start))
}

start := time.Now()
monthTab := []string{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}
monthTab = []string{"january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"}
mTab := []string{"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"}
</code></pre>

<h6>type class</h6>

<pre><code class="go  ">import "reflect"  
fmt.Println(reflect.TypeOf(doc))

import "github.com/go-ffmt/ffmt"
ffmt.P(m)  // type
ffmt.Puts  
ffmt.Pjson 
</code></pre>

<h6>ignore not used</h6>

<pre><code class="go">import (
    _ "fmt" //imported and not used
 )
</code></pre>

<h6>skip declared</h6>

<pre><code class="go">i := 1 
_ = i
</code></pre>

<h6>run time</h6>

<pre><code class="go">start := time.Now()
time.Now().Sub(start)
</code></pre>

<h5>screen</h5>

<pre><code class="go">import "github.com/inancgumus/screen"

func cleanScreen() {
    screen.Clear()
    screen.MoveTopLeft()
}
</code></pre>

<h3>time</h3>

<h6>time_format</h6>

<pre><code class="go">func timeFormat() string {
    t := time.Now()
    return fmt.Sprintf("%d-%02d-%02d %02d:%02d:%02d", t.Year(), int(t.Month()), t.Day(), t.Hour(), t.Minute(), t.Second())
}
</code></pre>

<h6>unix</h6>

<pre><code class="go">func unixTime(y, m, d, h, mi int) int {
    date := fmt.Sprintf("%v-%.2v-%.2vT%.2v:%.2v:00.000Z", y, m, d, h, mi)
    t, _ := time.Parse(time.RFC3339, date)
    unix := t.Unix() - 60*60*8
    return int(unix)
}
func timeStamp(utime int) string {
    t := time.Unix(int64(utime), 0)
    return fmt.Sprintf("%d/%02d/%02d", t.Year(), int(t.Month()), t.Day())
}
</code></pre>

<h5>date cal</h5>

<pre><code class="go">package main

import (
    "fmt"
    "time"
)

var _ = fmt.Println

var (
    y1, m1, d1 = 2019, 9, 2
    y2, m2, d2 = 2020, 7, 20
)

func main() {
    days := getTwoDate(y1, m1, d1, y2, m2, d2)
    fmt.Println(days)

    y3, m3, d3 := getAfterDays(y1, m1, d1, days)
    fmt.Println(y3, m3, d3)
}

func unixTime(y, m, d int) int {
    date := fmt.Sprintf("%v-%.2v-%.2vT00:00:00.000Z", y, m, d)
    t, _ := time.Parse(time.RFC3339, date)
    return int(t.Unix())
}

func getTwoDate(y1, m1, d1, y2, m2, d2 int) int {
    s := unixTime(y2, m2, d2) - unixTime(y1, m1, d1)
    return s / 86400
}

func getAfterDays(y, m, d, days int) (int, int, int) {
    unix := int64(unixTime(y, m, d) + days*60*60*24 - 60*60*8)
    t := time.Unix(unix, 0)
    return t.Year(), int(t.Month()), t.Day()
}
</code></pre>

<h3>string</h3>

<h6>strip</h6>

<p><code>strings.TrimSpace(str)</code></p>

<h6>string <-> to_int</h6>

<pre><code class="go">i, _ := strconv.Atoi(s)

s := strconv.Itoa(i)
</code></pre>

<h6>string <-> to_float</h6>

<pre><code class="go">fn, _  := strconv.ParseFloat(cell, 64
</code></pre>

<h6>fill_zero</h6>

<pre><code class="go">func rjust(s string, n int, fill string) string {
    return strings.Repeat(fill, n-len(s)) + s
}
func ljust(s string, n int, fill string) string {
    return s + strings.Repeat(fill, n-len(s))
}
</code></pre>

<h6>regexp</h6>

<pre><code class="go">func regexMatch(str, keyword string) bool {
    match, _ := regexp.MatchString(keyword, str)
    return match
}

//scan
func regexScans(str, keyword string, is ...int) []string {
    var txts []string
    re := regexp.MustCompile(keyword)
    match := re.FindStringSubmatch(str)
    //.FindAllStringSubmatch
    fmt.Println(match)
    if len(match) &gt; 0 {
        for _, i := range is {
            txts = append(txts, match[i])
        }
    }
    return txts
}

//replace
keyword := `"(.*)", "(.*)"`
re := regexp.MustCompile(keyword)
s := re.ReplaceAllString(e, ` $1 $2`)
</code></pre>

<h6>chr <-> ord</h6>

<pre><code class="go">func ord(s string) int {
    return int([]byte(s)[0])
}
func chr(i int) string {
    return fmt.Sprintf("%c", rune(i))
}
</code></pre>

<h6>string reverse</h6>

<pre><code class="go">func strReverse(str string) string {
    var comb string
    for i := len(str) - 1; i &gt;= 0; i-- {
        comb += string(str[i])
    }
    return comb
}
</code></pre>

<h6>index</h6>

<pre><code class="go">func strIndex(str string, bstr string) int {
    arr := strings.Split(str, "")
    for i, e := range arr {
        if bstr == string(e) {
            return i
        }
    }
    return -1
}
func strIndexS(str string, bstr string) []int {
    arr := strings.Split(str, "")
    is := []int{}
    for i, e := range arr {
        if bstr == string(e) {
            is = append(is, i)
        }
    }
    return is
}
</code></pre>

<h5>slice ch string</h5>

<pre><code class="go">func sliceChString(ch string, start int, end int) string {
    var size int
    var chs = []rune(ch)
    if len(chs) &gt; end &amp;&amp; end &gt; start {
        result := ""
        for _, e := range chs {
            str := string(e)
            if ord(str) &gt; 127 {
                size += 2
            } else {
                size += 1
            }
            result += str
            if size &gt; (end-start)*2 {
                break
            }
        }
        return result
    }
    return ch
}
</code></pre>

<h3>#</h3>

<pre><code class="go">func strEachSlice(str string, l int) []string {
    arr := strings.Split(str, "")
    var ar []string
    size := len(arr)
    for i := 0; i &lt; size; i = i + l {
        j := i + l
        if j &gt; size {
            j = size
        }
        ar = append(ar, strings.Join(arr[i:j], ""))
    }
    return ar
}
</code></pre>

<h3>array</h3>

<h6>eachSlice N part</h6>

<pre><code class="go">func eachSlice(arr []string, l int) [][]string {
    var ar [][]string
    size := len(arr)
    for i := 0; i &lt; size; i = i + l {
        j := i + l
        if j &gt; size {
            j = size
        }
        fmt.Println(len(arr[i:j]))
        ar = append(ar, arr[i:j])
    }
    return ar
}
</code></pre>

<h6>index</h6>

<pre><code class="go">func arrIncludeIndex(arr []string, str string) int {
    for i, e := range arr {
        if str == e {
            return i
        }
    }
    return -1
}
func arrIndexS(arr []string, str string) []int {
    is := []int{}
    for i, e := range arr {
        if str == e {
            is = append(is, i)
        }
    }
    return is
}

func arrRemoveByIndex(arr []string, idx int) []string {
    arr[idx] = arr[len(arr)-1]
    return arr[:len(arr)-1]
}
</code></pre>

<h6>bubbleSort</h6>

<pre><code class="go">func bubbleSort(arr []int) {
    size := len(arr)
    for i := 0; i &lt; size; i++ {
        for j := 1; j &lt; size; j++ {
            if arr[j] &gt; arr[j-1] {
                arr[j], arr[j-1] = arr[j-1], arr[j]
            }
        }
    }
}
</code></pre>

<h6>duplicate</h6>

<pre><code class="go">type Count struct {
    id    string
    count int
}

func bubbleSort(arr []Count) {
    size := len(arr)
    for i := 0; i &lt; size; i++ {
        for j := 1; j &lt; size; j++ {
            if arr[j].count &gt; arr[j-1].count {
                arr[j], arr[j-1] = arr[j-1], arr[j]
            }
        }
    }
}

func arrayDuplicate(arr []string) []Count {
    cs := make(map[string]int)
    for _, e := range arr {
        _, exist := cs[e]
        if exist {
            cs[e] += 1
        } else {
            cs[e] = 1
        }
    }
    count := []Count{}
    for cc := range cs {
        c := Count{cc, cs[cc]}
        count = append(count, c)
    }
    bubbleSort(count)
    return count
}
</code></pre>

<h6>unique</h6>

<pre><code class="go">func arrUnique ()  {

}
</code></pre>

<pre><code class="go">func arrReverse(arr []int) {
    for i := 0; i &lt; len(arr)/2; i++ {
        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]
    }
}
</code></pre>

<h6>sub</h6>

<pre><code class="go">func arrSub(arr1 []int, arr2 []int) []int {
    r := []int{}
    for _, e1 := range arr1 {
        if !arrInclude(arr2, e1) {
            r = append(r, e1)
        }
    }
    return r
}
</code></pre>

<h6>include</h6>

<pre><code class="go">func arrInclude(arr []int, str int) bool {
    for _, e := range arr {
        if str == e {
            return true
        }
    }
    return false
}
func arr1InclueArr2(arr1 []int, arr2 []int) bool {
    for _, e := range arr1 {
        if !reflect.DeepEqual(e, arr2) {
            return false
        }

    }
    return true
}
</code></pre>

<h5>Equal</h5>

<p><code>reflect.DeepEqual(a, b)</code></p>

<h5>compare</h5>

<pre><code class="go">func arrCompare(a1, a2 []string) ([]string, []string, []string) {
    var d1, same []string
    for _, e1 := range a1 {
        idx := arrIncludeIndex(a2, e1)
        if idx != -1 {
            same = append(same, e1)
            a2 = arrRemoveByIndex(a2, idx)
        } else {
            d1 = append(d1, e1)
        }
    }
    return d1, a2, same
}
</code></pre>

<h3>math</h3>

<h6>power</h6>

<pre><code class="go">import "math"
math.Pow(2, 5)

func pow(n, p int) int {
    if p == 1 {
        return n
    }
    return n * pow(n, p-1)
}
</code></pre>

<h6>bit</h6>

<pre><code class="go">n, err := strconv.ParseUint(val, 16, 32)
if err != nil {
    panic(err)
}
</code></pre>

<h6>d</h6>

<pre><code class="go">math.Ceil(0.2)
math.Floor(0.2)
</code></pre>

<h5>even odd</h5>

<pre><code class="go">func evenBool(i int) bool {
    return i%2 == 0
}
func oddBool(i int) bool {
    return i%2 != 0
}
</code></pre>

<h6>toHex</h6>

<pre><code class="go">func toHex(i int) string {
    return fmt.Sprintf("%x", i)
}
</code></pre>

<h6>rand</h6>

<pre><code class="go">"math/rand"

func randNumStr(min, max float64) string {
    rand.Seed(time.Now().UnixNano())
    n := min + rand.Float64()*(max-min)
    return fmt.Sprintf("%.1f", n)
}

func randNumInt(min, max int) int {
    rand.Seed(time.Now().UnixNano())
    return min + rand.Intn(max-min+1)
}
</code></pre>

<h3>image</h3>

<pre><code class="go">func rgbtoHex(i uint32) string {
    hex := fmt.Sprintf("%x", i)
    return hex[0:2]
}

func rgbaToPixel(r uint32, g uint32, b uint32, a uint32) string {
    return rgbtoHex(r) + rgbtoHex(g) + rgbtoHex(b)
}
img, _, err := image.Decode(file)

bounds := img.Bounds()
width, height := bounds.Max.X, bounds.Max.Y

pixel := rgbaToPixel(img.At(x, y).RGBA())
</code></pre>

<pre><code class="go">
  f, err = os.Open(input)
        img, _, err = image.Decode(f)
        if err != nil {
            fmt.Println(err)
            os.Exit(1)
        }
img = image.NewRGBA(image.Rect(0, 0, width, width))
</code></pre>

<h3>gin</h3>

<h5>soup</h5>

<pre><code class="go">"github.com/anaskhan96/soup"
"fmt"
"io/ioutil"
"net/http"
"os"
"runtime"

doc := getDoc(url)

func getDoc(url string) soup.Root {
    req, err := http.NewRequest("GET", url, nil)
    printError(err)
    res, err := http.DefaultClient.Do(req)
    printError(err)
    body, err := ioutil.ReadAll(res.Body)
    printError(err)
    resp := string(body)
    //save(resp, "/tmp/log.html")
    return soup.HTMLParse(resp)
}

/*func getDoc(url string) soup.Root {
    tr := &amp;http.Transport{TLSClientConfig: &amp;tls.Config{InsecureSkipVerify: true}}
    client := &amp;http.Client{
        Timeout:   15 * time.Second,
        Transport: tr,
    }
    req, err := http.NewRequest("GET", url, nil)
    req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0")
    printError(err)
    resp, err := client.Do(req)
    printError(err)

    body, err := ioutil.ReadAll(resp.Body)
    printError(err)
    return soup.HTMLParse(string(body))
}*/


"github.com/sclevine/agouti"

func openBrowser(screenX, screenY int) (*agouti.Page, *agouti.WebDriver) {
    driver := agouti.ChromeDriver(
        agouti.ChromeOptions("args", []string{
            "--headless",
            "--disable-gpu",
            "--disable-notifications",
            //"--no-sandbox",
            fmt.Sprintf("--window-size=%v,%v", screenX, screenY),
        }),
    )
    err := driver.Start()
    printError(err)
    page, err := driver.NewPage()
    printError(err)
    return page, driver
}

func main (){
    page, driver := openBrowser()
    defer driver.Stop()
    page.Navigate(url)
    resp, _ := page.HTML()
    doc := soup.HTMLParse(resp)

}

func runJs(page *agouti.Page) {
    js := `window.scrollTo(0,window.scrollY+window.innerHeight*.9);`
    page.RunScript(js, nil, nil)
}

func sendKeys(page *agouti.Page, key string) {
    var k string
    switch key {
    case "Home":
        k = "\uE011"
    case "pageDown":
        k = "\uE00F"
    }
    page.Find("html").SendKeys(k)

 // NULL        = "\uE000", CANCEL     = "\uE001", HELP     = "\uE002"
 // BACK_SPACE  = "\uE003", TAB        = "\uE004", CLEAR    = "\uE005"
 // RETURN      = "\uE006", ENTER      = "\uE007", SHIFT    = "\uE008"
 // CONTROL     = "\uE009", ALT        = "\uE00A", PAUSE    = "\uE00B"
 // ESCAPE      = "\uE00C", SPACE      = "\uE00D", PAGE_UP  = "\uE00E"
 // PAGE_DOWN   = "\uE00F", END        = "\uE010", HOME     = "\uE011"
 // LEFT        = "\uE012", ARROW_LEFT = "\uE012", ARROW_UP = "\uE013"
 // ARROW_RIGHT = "\uE014", ARROW_DOWN = "\uE015", INSERT   = "\uE016"
 // DELETE      = "\uE017", SEMICOLON  = "\uE018", EQUALS   = "\uE019"
 // NUMPAD0     = "\uE01A", NUMPAD1    = "\uE01B", NUMPAD2  = "\uE01C"
 // NUMPAD3     = "\uE01D", NUMPAD4    = "\uE01E", NUMPAD5  = "\uE01F"
 // NUMPAD6     = "\uE020", NUMPAD7    = "\uE021", NUMPAD8  = "\uE022"
 // NUMPAD9     = "\uE023", MULTIPLY   = "\uE024", ADD      = "\uE025"
 // SEPARATOR   = "\uE026", SUBTRACT   = "\uE027", DECIMAL  = "\uE028"
 // DIVIDE      = "\uE029", F1         = "\uE031", F2       = "\uE032"
 // F3          = "\uE033", F4         = "\uE034", F5       = "\uE035"
 // F6          = "\uE036", F7         = "\uE037", F8       = "\uE038"
 // F9          = "\uE039", F10        = "\uE03A", F11      = "\uE03B"
 // F12         = "\uE03C", META       = "\uE03D", COMMAND  = "\uE03D"


}
</code></pre>

<h6>sleep</h6>

<pre><code class="go">time.Sleep(1 * time.Second)

func sleep(t int) {
    time.Sleep(time.Duration(t) * time.Millisecond)
}
</code></pre>

<h5>table</h5>

<pre><code class="go">data := [][]string
info := doc.Find("table", "class", "auto-style4")
table := info.FindAll("tr")
for _, tr := range table {
    var tmp []string
    for _, td := range tr.FindAll("td", "class", "auto-style5") {
        tmp = append(tmp, td)
    }
    data = append(data, tmp)
}
</code></pre>

<h5>br</h5>

<pre><code class="go">data := [][]string
for _, t := range td.Children() {
    if t.NodeValue != "br" {
        data = append(data, t.NodeValue)
    }
}
</code></pre>

<h5>nbsp</h5>

<pre><code class="go">func removeNbsp(s string) string {
    return strings.Replace(s, "\u00A0", "", -1)
}

func removeNbsp(s string) string {
    var txt string
    for _, b := range []byte(s) {
        if b != 194 &amp;&amp; b != 160 {
            txt += string(b)
        }
    }
    return txt
}
</code></pre>

<h5>excel</h5>

<pre><code class="go">func readXlsx(path string) [][]string {
    f, err := excelize.OpenFile(path)
    printError(err)
    var datas [][]string
    sheet1 := f.GetSheetMap()[1]
    rows := f.GetRows(sheet1)
    for _, row := range rows {
        var data []string
        for _, cell := range row {
            cell = strings.TrimSpace(cell)
            data = append(data, cell)
        }
        datas = append(datas, data)
    }
    return datas
}

func writeXlsx(path string, data [][]string) {
    f := excelize.NewFile()
    index := f.NewSheet("Sheet1")
    for i, row := range data {
        for j, cell := range row {
            c := fmt.Sprintf("%c%v", rune(j+65), i+1)
            f.SetCellValue("Sheet1", c, cell)
        }
    }
    f.SetActiveSheet(index)
    err := f.SaveAs(path)
    printError(err)
}
</code></pre>

<pre><code class="go">func moniterExit() {
    c := make(chan os.Signal)
    signal.Notify(c)

    go func() {
        for s := range c {
            switch s {
            case syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM:
                fmt.Println(s)
                ExitFunc()
            default:
                fmt.Println(s)
            }
        }
    }()
}
</code></pre>

<h5>image</h5>

<pre><code class="go">"github.com/fogleman/gg"

img, err := gg.LoadImage(gfiImage)
printError(err)
s := img.Bounds().Size()
width, height := s.X, s.Y

dc := gg.NewContext(width, height)
dc.SetRGB(0, 0, 0)
dc.DrawImage(img, 0, 0)

addText(dc, timeFormat(), 45, 48, 40)
dc.SavePNG(imageFakeSend)


func addText(dc *gg.Context, str string, x, y, s float64) {
    dc.LoadFontFace("/data/font/msjh.ttc", s)
    dc.SetRGB(150, 150, 150)
    dc.DrawStringAnchored(str, x, y, 0, 0)
}
</code></pre>

<h3>robotgo</h3>

<pre><code class="go">"github.com/go-vgo/robotgo"

robotgo.MoveMouseSmooth(21, 297, 0.5, 1.0)
robotgo.MouseClick("left", true)
robotgo.KeyTap("o", "ctrl")
robotgo.KeyTap(`r`, `command`)

func findpic(pic string, tryTime int, try ...int) (int, int) {
    cs := robotgo.CaptureScreen()
    sx, sy := robotgo.FindPic(pic, cs, 0.1)
    if len(try) == 0 {
        try = append(try, 0)
    }
    last := try[len(try)-1]
    if (sx != -1 &amp;&amp; sy != -1) || last &gt; tryTime {
        return sx, sy
    }
    return findpic(pic, tryTime, last+1)
}
</code></pre>

<h3>mp3</h3>

<pre><code class="go">"github.com/faiface/beep/mp3"
"github.com/faiface/beep/speaker"

func mp3Play(path string, sec ...int) {
    f, err := os.Open(path)
    printError(err)
    streamer, format, err := mp3.Decode(f)
    printError(err)
    defer streamer.Close()
    speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))
    speaker.Play(streamer)
    if len(sec) &gt; 0 {
        sleep(sec[0])
    } else {
        sleep(1000)
    }
}
</code></pre>

<h4>win UI</h4>

<p><code>https://github.com/harry1453/go-common-file-dialog</code></p>

<pre><code class="go">"github.com/harry1453/go-common-file-dialog/cfd"
"github.com/harry1453/go-common-file-dialog/cfdutil"

func openFile() string {
    result, _ := cfdutil.ShowOpenFileDialog(cfd.DialogConfig{
        Title: "Open A xlsx File",
        Role:  "Open A xlsx File",
        FileFilters: []cfd.FileFilter{
            {
                DisplayName: "*.xlsx",
                Pattern:     "*.xlsx",
            },
            {
                DisplayName: "All Files (*.*)",
                Pattern:     "*.*",
            },
        },
        SelectedFileFilterIndex: 2,
        FileName:                "*.xlsx",
        DefaultExtension:        "xlsx",
    })

    return result
}
</code></pre>

<h3>Msgbox</h3>

<pre><code class="go">
"syscall"


func MessageBox(title, caption string) {
    syscall.NewLazyDLL("user32.dll").NewProc("MessageBoxW").Call(
        uintptr(0),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(caption))),
        uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(title))),
        uintptr(0))
}
</code></pre>

<h3>barCode</h3>

<pre><code class="go">
"github.com/makiuchi-d/gozxing"
"github.com/makiuchi-d/gozxing/oned"

func genCode128(id string) {
    enc := oned.NewCode128Writer()
    img, _ := enc.Encode(id, gozxing.BarcodeFormat_CODE_128, 250, 50, nil)
    path := genPath(id)
    file, _ := os.Create(path)
    defer file.Close()
    png.Encode(file, img)
}
</code></pre>
]]></content>
  </entry>
  
 </feed>
