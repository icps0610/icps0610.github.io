<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Uncategorized | icps]]></title>
  <link href="https://icps0610.github.io/blog/categories/uncategorized/atom.xml" rel="self"/>
  <link href="https://icps0610.github.io/"/>
  <updated>2021-08-29T17:00:46+08:00</updated>
  <id>https://icps0610.github.io/</id>
  <author>
    <name><![CDATA[icps]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vaccine]]></title>
    <link href="https://icps0610.github.io/blog/2021/08/29/vaccine/"/>
    <updated>2021-08-29T16:41:07+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/08/29/vaccine</id>
    <content type="html"><![CDATA[<pre><code class="golang">
package main

import (
    "fmt"
    "github.com/anaskhan96/soup"
    "io/ioutil"
    "net/http"
    "os"
    "os/exec"
    "regexp"
    "runtime"
)

var (
    path      = "/data/go/covid19/vaccine.txt"
    matsuhUrl = ""
    record    = readFile(path)
)

func main() {
    var content string
    doc := getDoc(matsuhUrl)
    for _, ul := range doc.FindAll("ul", "class", "newsList") {
        for i, li := range ul.FindAll("li") {
            a := li.Find("a")
            title := a.Find("p").Text()
            if regexMatch(title, "接種通知") {
                url := a.Attrs()["href"]
                date := a.Find("date").Text()
                text := getPageContent(url)
                content += (date + text)
                break
            }
        }
    }

    if record != content {
        lineMessage(content)
        saveFile(content, path)
    }

}

func getPageContent(url string) string {
    var text string
    doc2 := getDoc(url)
    for i, tag := range doc2.Find("article").Children() {
        if i &lt;= 4 {
            for _, ta := range tag.Children() {
                text += "\n\n" + ta.FullText()
            }
        }
    }
    return text
}

func lineMessage(message string) {
    cmd := fmt.Sprintf(`/data/go/lineMessage/lineMessage me "%s"`, message)
    _, err := exec.Command("bash", "-c", cmd).Output()
    printError(err)
}

func getDoc(url string) soup.Root {
    req, err := http.NewRequest("GET", url, nil)
    printError(err)
    res, err := http.DefaultClient.Do(req)
    printError(err)
    body, err := ioutil.ReadAll(res.Body)
    printError(err)
    resp := string(body)
    return soup.HTMLParse(resp)
}

func regexMatch(str, keyword string) bool {
    match, _ := regexp.MatchString(keyword, str)
    return match
}

func readFile(path string) string {
    dat, err := ioutil.ReadFile(path)
    printError(err)
    return string(dat)
}

func saveFile(content, path string) {
    err := ioutil.WriteFile(path, []byte(content), 0644)
    printError(err)
}

func printError(err error) {
    if err != nil {
        pc, _, _, _ := runtime.Caller(1)
        fmt.Println(runtime.FuncForPC(pc).Name())
        fmt.Println(err)
    }
}

var _, _ = fmt.Println, os.Exit
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Countdown]]></title>
    <link href="https://icps0610.github.io/blog/2021/06/15/sound/"/>
    <updated>2021-06-15T19:09:06+08:00</updated>
    <id>https://icps0610.github.io/blog/2021/06/15/sound</id>
    <content type="html"><![CDATA[<h3><code>https://soundoftext.com/</code></h3>

<pre><code class="bash">
ffmpeg -y -i run.mp3 -vn -ar 48000 -ac 2 -b:a 320k run.mp3

sox -n -r 48000 -c 2 slice.wav trim 0 0.8
ffmpeg -y -i slice.wav -vn -ar 48000 -ac 2 -b:a 320k s.mp3

cat run.mp3 s.mp3 5.mp3 s.mp3 4.mp3 s.mp3 3.mp3 s.mp3 2.mp3 s.mp3 1.mp3 54321.mp3
ffmpeg -i "concat:run.mp3|s.mp3|5.mp3|s.mp3|4.mp3|s.mp3|3.mp3|s.mp3|2.mp3|s.mp3|1.mp3" -acodec copy 54321.mp3
copy /b run.mp3+s.mp3+5.mp3+s.mp3+4.mp3+s.mp3+3.mp3+s.mp3+2.mp3+s.mp3+1.mp3 54321.mp3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[imageMagick]]></title>
    <link href="https://icps0610.github.io/blog/2020/11/05/imagemagick/"/>
    <updated>2020-11-05T15:28:16+08:00</updated>
    <id>https://icps0610.github.io/blog/2020/11/05/imagemagick</id>
    <content type="html"><![CDATA[<p><code>find /tmp/tmp/cc -name "*.JPG" -exec mogrify -format png {} \;</code></p>

<p><code>convert /tmp/covid19.png -gravity southeast -pointsize 20 label:"2021/06/03 14:54" -composite /tmp/covid191.png</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wsl_DISPLAY]]></title>
    <link href="https://icps0610.github.io/blog/2020/08/15/wsl-display/"/>
    <updated>2020-08-15T15:15:05+08:00</updated>
    <id>https://icps0610.github.io/blog/2020/08/15/wsl-display</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[U2_fb_id]]></title>
    <link href="https://icps0610.github.io/blog/2020/07/18/u2_fb_id/"/>
    <updated>2020-07-18T14:17:16+08:00</updated>
    <id>https://icps0610.github.io/blog/2020/07/18/u2_fb_id</id>
    <content type="html"><![CDATA[<blockquote><blockquote><p>ref <code>https://stackoverflow.com/questions/6903823/regex-for-youtube-id</code></p></blockquote></blockquote>

<pre><code class="">(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&amp;]v=)|youtu\.be\/)([A-Za-z0-9_-]{11})

https:\/\/www\.facebook\.com\/(story\.php\?(story)_fbid=(\w+)\&amp;id=(\w+)(\&amp;|))
https:\/\/www\.facebook\.com\/(\w+)\/(videos|posts)\/([a-zA-Z0-9\.]+)
https:\/\/www\.facebook\.com\/((photo)\.php\?fbid=(\w+)(\&amp;|)|(\w+)\/(photos)\/([a-zA-Z0-9\.]+))
</code></pre>
]]></content>
  </entry>
  
 </feed>
